/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_hosted_config.proto */

#ifndef PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct WifiInitConfig WifiInitConfig;
typedef struct WifiCountry WifiCountry;
typedef struct WifiActiveScanTime WifiActiveScanTime;
typedef struct WifiScanTime WifiScanTime;
typedef struct WifiScanConfig WifiScanConfig;
typedef struct WifiApRecord WifiApRecord;
typedef struct WifiScanThreshold WifiScanThreshold;
typedef struct WifiPmfConfig WifiPmfConfig;
typedef struct WifiApConfig WifiApConfig;
typedef struct WifiStaConfig WifiStaConfig;
typedef struct WifiConfig WifiConfig;
typedef struct WifiStaInfo WifiStaInfo;
typedef struct WifiStaList WifiStaList;
typedef struct VendorIeData VendorIeData;
typedef struct WifiPktRxCtrl WifiPktRxCtrl;
typedef struct WifiPromiscuousPkt WifiPromiscuousPkt;
typedef struct WifiPromiscuousFilter WifiPromiscuousFilter;
typedef struct WifiCsiConfig WifiCsiConfig;
typedef struct WifiCsiInfo WifiCsiInfo;
typedef struct WifiAntGpio WifiAntGpio;
typedef struct WifiAntGpioConfig WifiAntGpioConfig;
typedef struct WifiAntConfig WifiAntConfig;
typedef struct WifiActionTxReq WifiActionTxReq;
typedef struct WifiFtmInitiatorCfg WifiFtmInitiatorCfg;
typedef struct WifiEventStaScanDone WifiEventStaScanDone;
typedef struct WifiEventStaConnected WifiEventStaConnected;
typedef struct WifiEventStaDisconnected WifiEventStaDisconnected;
typedef struct WifiEventStaAuthmodeChange WifiEventStaAuthmodeChange;
typedef struct WifiEventStaWpsErPin WifiEventStaWpsErPin;
typedef struct ApCred ApCred;
typedef struct WifiEventStaWpsErSuccess WifiEventStaWpsErSuccess;
typedef struct WifiEventApProbeReqRx WifiEventApProbeReqRx;
typedef struct WifiEventBssRssiLow WifiEventBssRssiLow;
typedef struct WifiFtmReportEntry WifiFtmReportEntry;
typedef struct WifiEventFtmReport WifiEventFtmReport;
typedef struct WifiEventActionTxStatus WifiEventActionTxStatus;
typedef struct WifiEventRocDone WifiEventRocDone;
typedef struct WifiEventApWpsRgPin WifiEventApWpsRgPin;
typedef struct WifiEventApWpsRgFailReason WifiEventApWpsRgFailReason;
typedef struct WifiEventApWpsRgSuccess WifiEventApWpsRgSuccess;
typedef struct ScanResult ScanResult;
typedef struct ConnectedSTAList ConnectedSTAList;
typedef struct CtrlMsgReqGetMacAddress CtrlMsgReqGetMacAddress;
typedef struct CtrlMsgRespGetMacAddress CtrlMsgRespGetMacAddress;
typedef struct CtrlMsgReqGetMode CtrlMsgReqGetMode;
typedef struct CtrlMsgRespGetMode CtrlMsgRespGetMode;
typedef struct CtrlMsgReqSetMode CtrlMsgReqSetMode;
typedef struct CtrlMsgRespSetMode CtrlMsgRespSetMode;
typedef struct CtrlMsgReqGetStatus CtrlMsgReqGetStatus;
typedef struct CtrlMsgRespGetStatus CtrlMsgRespGetStatus;
typedef struct CtrlMsgReqSetMacAddress CtrlMsgReqSetMacAddress;
typedef struct CtrlMsgRespSetMacAddress CtrlMsgRespSetMacAddress;
typedef struct CtrlMsgReqGetAPConfig CtrlMsgReqGetAPConfig;
typedef struct CtrlMsgRespGetAPConfig CtrlMsgRespGetAPConfig;
typedef struct CtrlMsgReqConnectAP CtrlMsgReqConnectAP;
typedef struct CtrlMsgRespConnectAP CtrlMsgRespConnectAP;
typedef struct CtrlMsgReqGetSoftAPConfig CtrlMsgReqGetSoftAPConfig;
typedef struct CtrlMsgRespGetSoftAPConfig CtrlMsgRespGetSoftAPConfig;
typedef struct CtrlMsgReqStartSoftAP CtrlMsgReqStartSoftAP;
typedef struct CtrlMsgRespStartSoftAP CtrlMsgRespStartSoftAP;
typedef struct CtrlMsgReqScanResult CtrlMsgReqScanResult;
typedef struct CtrlMsgRespScanResult CtrlMsgRespScanResult;
typedef struct CtrlMsgReqSoftAPConnectedSTA CtrlMsgReqSoftAPConnectedSTA;
typedef struct CtrlMsgRespSoftAPConnectedSTA CtrlMsgRespSoftAPConnectedSTA;
typedef struct CtrlMsgReqOTABegin CtrlMsgReqOTABegin;
typedef struct CtrlMsgRespOTABegin CtrlMsgRespOTABegin;
typedef struct CtrlMsgReqOTAWrite CtrlMsgReqOTAWrite;
typedef struct CtrlMsgRespOTAWrite CtrlMsgRespOTAWrite;
typedef struct CtrlMsgReqOTAEnd CtrlMsgReqOTAEnd;
typedef struct CtrlMsgRespOTAEnd CtrlMsgRespOTAEnd;
typedef struct CtrlMsgReqVendorIEData CtrlMsgReqVendorIEData;
typedef struct CtrlMsgReqSetSoftAPVendorSpecificIE CtrlMsgReqSetSoftAPVendorSpecificIE;
typedef struct CtrlMsgRespSetSoftAPVendorSpecificIE CtrlMsgRespSetSoftAPVendorSpecificIE;
typedef struct CtrlMsgReqWifiSetMaxTxPower CtrlMsgReqWifiSetMaxTxPower;
typedef struct CtrlMsgRespWifiSetMaxTxPower CtrlMsgRespWifiSetMaxTxPower;
typedef struct CtrlMsgReqWifiGetMaxTxPower CtrlMsgReqWifiGetMaxTxPower;
typedef struct CtrlMsgRespWifiGetMaxTxPower CtrlMsgRespWifiGetMaxTxPower;
typedef struct CtrlMsgReqConfigHeartbeat CtrlMsgReqConfigHeartbeat;
typedef struct CtrlMsgRespConfigHeartbeat CtrlMsgRespConfigHeartbeat;
typedef struct CtrlMsgReqWifiInit CtrlMsgReqWifiInit;
typedef struct CtrlMsgRespWifiInit CtrlMsgRespWifiInit;
typedef struct CtrlMsgReqWifiDeinit CtrlMsgReqWifiDeinit;
typedef struct CtrlMsgRespWifiDeinit CtrlMsgRespWifiDeinit;
typedef struct CtrlMsgReqWifiSetConfig CtrlMsgReqWifiSetConfig;
typedef struct CtrlMsgRespWifiSetConfig CtrlMsgRespWifiSetConfig;
typedef struct CtrlMsgReqWifiGetConfig CtrlMsgReqWifiGetConfig;
typedef struct CtrlMsgRespWifiGetConfig CtrlMsgRespWifiGetConfig;
typedef struct CtrlMsgReqWifiConnect CtrlMsgReqWifiConnect;
typedef struct CtrlMsgRespWifiConnect CtrlMsgRespWifiConnect;
typedef struct CtrlMsgReqWifiDisconnect CtrlMsgReqWifiDisconnect;
typedef struct CtrlMsgRespWifiDisconnect CtrlMsgRespWifiDisconnect;
typedef struct CtrlMsgReqWifiStart CtrlMsgReqWifiStart;
typedef struct CtrlMsgRespWifiStart CtrlMsgRespWifiStart;
typedef struct CtrlMsgReqWifiStop CtrlMsgReqWifiStop;
typedef struct CtrlMsgRespWifiStop CtrlMsgRespWifiStop;
typedef struct CtrlMsgReqWifiScanStart CtrlMsgReqWifiScanStart;
typedef struct CtrlMsgRespWifiScanStart CtrlMsgRespWifiScanStart;
typedef struct CtrlMsgReqWifiScanStop CtrlMsgReqWifiScanStop;
typedef struct CtrlMsgRespWifiScanStop CtrlMsgRespWifiScanStop;
typedef struct CtrlMsgReqWifiScanGetApNum CtrlMsgReqWifiScanGetApNum;
typedef struct CtrlMsgRespWifiScanGetApNum CtrlMsgRespWifiScanGetApNum;
typedef struct CtrlMsgReqWifiScanGetApRecords CtrlMsgReqWifiScanGetApRecords;
typedef struct CtrlMsgRespWifiScanGetApRecords CtrlMsgRespWifiScanGetApRecords;
typedef struct CtrlMsgReqWifiClearApList CtrlMsgReqWifiClearApList;
typedef struct CtrlMsgRespWifiClearApList CtrlMsgRespWifiClearApList;
typedef struct CtrlMsgReqWifiRestore CtrlMsgReqWifiRestore;
typedef struct CtrlMsgRespWifiRestore CtrlMsgRespWifiRestore;
typedef struct CtrlMsgReqWifiClearFastConnect CtrlMsgReqWifiClearFastConnect;
typedef struct CtrlMsgRespWifiClearFastConnect CtrlMsgRespWifiClearFastConnect;
typedef struct CtrlMsgReqWifiDeauthSta CtrlMsgReqWifiDeauthSta;
typedef struct CtrlMsgRespWifiDeauthSta CtrlMsgRespWifiDeauthSta;
typedef struct CtrlMsgReqWifiStaGetApInfo CtrlMsgReqWifiStaGetApInfo;
typedef struct CtrlMsgRespWifiStaGetApInfo CtrlMsgRespWifiStaGetApInfo;
typedef struct CtrlMsgEventWifiEventNoArgs CtrlMsgEventWifiEventNoArgs;
typedef struct CtrlMsgEventESPInit CtrlMsgEventESPInit;
typedef struct CtrlMsgEventHeartbeat CtrlMsgEventHeartbeat;
typedef struct CtrlMsgEventStationDisconnectFromAP CtrlMsgEventStationDisconnectFromAP;
typedef struct CtrlMsgEventAPStaDisconnected CtrlMsgEventAPStaDisconnected;
typedef struct CtrlMsgEventAPStaConnected CtrlMsgEventAPStaConnected;
typedef struct CtrlMsgEventStaScanDone CtrlMsgEventStaScanDone;
typedef struct CtrlMsg CtrlMsg;


/* --- enums --- */

/*
 * Enums similar to ESP IDF 
 */
typedef enum _CtrlVendorIEType {
  CTRL__VENDOR_IETYPE__Beacon = 0,
  CTRL__VENDOR_IETYPE__Probe_req = 1,
  CTRL__VENDOR_IETYPE__Probe_resp = 2,
  CTRL__VENDOR_IETYPE__Assoc_req = 3,
  CTRL__VENDOR_IETYPE__Assoc_resp = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__VENDOR_IETYPE)
} CtrlVendorIEType;
typedef enum _CtrlVendorIEID {
  CTRL__VENDOR_IEID__ID_0 = 0,
  CTRL__VENDOR_IEID__ID_1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__VENDOR_IEID)
} CtrlVendorIEID;
typedef enum _CtrlWifiBw {
  CTRL__WIFI_BW__BW_Invalid = 0,
  CTRL__WIFI_BW__HT20 = 1,
  CTRL__WIFI_BW__HT40 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_BW)
} CtrlWifiBw;
typedef enum _CtrlWifiPowerSave {
  CTRL__WIFI_POWER_SAVE__PS_Invalid = 0,
  CTRL__WIFI_POWER_SAVE__MIN_MODEM = 1,
  CTRL__WIFI_POWER_SAVE__MAX_MODEM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_POWER_SAVE)
} CtrlWifiPowerSave;
typedef enum _CtrlWifiSecProt {
  CTRL__WIFI_SEC_PROT__Open = 0,
  CTRL__WIFI_SEC_PROT__WEP = 1,
  CTRL__WIFI_SEC_PROT__WPA_PSK = 2,
  CTRL__WIFI_SEC_PROT__WPA2_PSK = 3,
  CTRL__WIFI_SEC_PROT__WPA_WPA2_PSK = 4,
  CTRL__WIFI_SEC_PROT__WPA2_ENTERPRISE = 5,
  CTRL__WIFI_SEC_PROT__WPA3_PSK = 6,
  CTRL__WIFI_SEC_PROT__WPA2_WPA3_PSK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_SEC_PROT)
} CtrlWifiSecProt;
/*
 * enums for Control path 
 */
typedef enum _CtrlStatus {
  CTRL__STATUS__Connected = 0,
  CTRL__STATUS__Not_Connected = 1,
  CTRL__STATUS__No_AP_Found = 2,
  CTRL__STATUS__Connection_Fail = 3,
  CTRL__STATUS__Invalid_Argument = 4,
  CTRL__STATUS__Out_Of_Range = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__STATUS)
} CtrlStatus;
typedef enum _CtrlMsgType {
  CTRL_MSG_TYPE__MsgType_Invalid = 0,
  CTRL_MSG_TYPE__Req = 1,
  CTRL_MSG_TYPE__Resp = 2,
  CTRL_MSG_TYPE__Event = 3,
  CTRL_MSG_TYPE__MsgType_Max = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG_TYPE)
} CtrlMsgType;
typedef enum _CtrlMsgId {
  CTRL_MSG_ID__MsgId_Invalid = 0,
  /*
   ** Request Msgs *
   */
  /*
   *0x100
   */
  CTRL_MSG_ID__Req_Base = 256,
  /*
   *0x101
   */
  CTRL_MSG_ID__Req_GetMACAddress = 257,
  /*
   *0x102
   */
  CTRL_MSG_ID__Req_SetMacAddress = 258,
  /*
   *0x103
   */
  CTRL_MSG_ID__Req_GetWifiMode = 259,
  /*
   *0x104
   */
  CTRL_MSG_ID__Req_SetWifiMode = 260,
  /*
   *0x105
   */
  CTRL_MSG_ID__Req_GetAPScanList = 261,
  /*
   *0x106
   */
  CTRL_MSG_ID__Req_GetAPConfig = 262,
  /*
   *0x107
   */
  CTRL_MSG_ID__Req_ConnectAP = 263,
  /*
   *0x108
   */
  CTRL_MSG_ID__Req_DisconnectAP = 264,
  /*
   *0x109
   */
  CTRL_MSG_ID__Req_GetSoftAPConfig = 265,
  /*
   *0x10a
   */
  CTRL_MSG_ID__Req_SetSoftAPVendorSpecificIE = 266,
  /*
   *0x10b
   */
  CTRL_MSG_ID__Req_StartSoftAP = 267,
  /*
   *0x10c
   */
  CTRL_MSG_ID__Req_GetSoftAPConnectedSTAList = 268,
  /*
   *0x10d
   */
  CTRL_MSG_ID__Req_StopSoftAP = 269,
  /*
   *0x10e
   */
  CTRL_MSG_ID__Req_WifiSetPs = 270,
  /*
   *0x10f
   */
  CTRL_MSG_ID__Req_WifiGetPs = 271,
  /*
   *0x110
   */
  CTRL_MSG_ID__Req_OTABegin = 272,
  /*
   *0x111
   */
  CTRL_MSG_ID__Req_OTAWrite = 273,
  /*
   *0x112
   */
  CTRL_MSG_ID__Req_OTAEnd = 274,
  /*
   *0x113
   */
  CTRL_MSG_ID__Req_WifiSetMaxTxPower = 275,
  /*
   *0x114
   */
  CTRL_MSG_ID__Req_WifiGetMaxTxPower = 276,
  /*
   *0x115
   */
  CTRL_MSG_ID__Req_ConfigHeartbeat = 277,
  /*
   *0x116
   */
  CTRL_MSG_ID__Req_WifiInit = 278,
  /*
   *0x117
   */
  CTRL_MSG_ID__Req_WifiDeinit = 279,
  /*
   *0x118
   */
  CTRL_MSG_ID__Req_WifiStart = 280,
  /*
   *0x119
   */
  CTRL_MSG_ID__Req_WifiStop = 281,
  /*
   *0x11a
   */
  CTRL_MSG_ID__Req_WifiConnect = 282,
  /*
   *0x11b
   */
  CTRL_MSG_ID__Req_WifiDisconnect = 283,
  /*
   *0x11c
   */
  CTRL_MSG_ID__Req_WifiSetConfig = 284,
  /*
   *0x11d
   */
  CTRL_MSG_ID__Req_WifiGetConfig = 285,
  /*
   *0x11e
   */
  CTRL_MSG_ID__Req_WifiScanStart = 286,
  /*
   *0x11f
   */
  CTRL_MSG_ID__Req_WifiScanStop = 287,
  /*
   *0x120
   */
  CTRL_MSG_ID__Req_WifiScanGetApNum = 288,
  /*
   *0x121
   */
  CTRL_MSG_ID__Req_WifiScanGetApRecords = 289,
  /*
   *0x122
   */
  CTRL_MSG_ID__Req_WifiClearApList = 290,
  /*
   *0x123
   */
  CTRL_MSG_ID__Req_WifiRestore = 291,
  /*
   *0x124
   */
  CTRL_MSG_ID__Req_WifiClearFastConnect = 292,
  /*
   *0x125
   */
  CTRL_MSG_ID__Req_WifiDeauthSta = 293,
  /*
   *0x126
   */
  CTRL_MSG_ID__Req_WifiStaGetApInfo = 294,
  /*
   *Req_WifiSetPs                     = 295; //0x127
   *Req_WifiGetPs                     = 296; //0x128
   */
  /*
   *0x129
   */
  CTRL_MSG_ID__Req_WifiSetProtocol = 297,
  /*
   *0x12a
   */
  CTRL_MSG_ID__Req_WifiGetProtocol = 298,
  /*
   *0x12b
   */
  CTRL_MSG_ID__Req_WifiSetBandwidth = 299,
  /*
   *0x12c
   */
  CTRL_MSG_ID__Req_WifiGetBandwidth = 300,
  /*
   *0x12d
   */
  CTRL_MSG_ID__Req_WifiSetChannel = 301,
  /*
   *0x12e
   */
  CTRL_MSG_ID__Req_WifiGetChannel = 302,
  /*
   *0x12f
   */
  CTRL_MSG_ID__Req_WifiSetCountry = 303,
  /*
   *0x130
   */
  CTRL_MSG_ID__Req_WifiGetCountry = 304,
  /*
   *  Req_WifiSetPromiscuousRxCb        = 305; //0x131
   */
  /*
   *0x131
   */
  CTRL_MSG_ID__Req_WifiSetPromiscuous = 305,
  /*
   *0x132
   */
  CTRL_MSG_ID__Req_WifiGetPromiscuous = 306,
  /*
   *0x133
   */
  CTRL_MSG_ID__Req_WifiSetPromiscuousFilter = 307,
  /*
   *0x134
   */
  CTRL_MSG_ID__Req_WifiGetPromiscuousFilter = 308,
  /*
   *0x135
   */
  CTRL_MSG_ID__Req_WifiSetPromiscuousCtrlFilter = 309,
  /*
   *0x136
   */
  CTRL_MSG_ID__Req_WifiGetPromiscuousCtrlFilter = 310,
  /*
   *0x137
   */
  CTRL_MSG_ID__Req_WifiApGetStaList = 311,
  /*
   *0x138
   */
  CTRL_MSG_ID__Req_WifiApGetStaAid = 312,
  /*
   *0x139
   */
  CTRL_MSG_ID__Req_WifiSetStorage = 313,
  /*
   *0x13a
   */
  CTRL_MSG_ID__Req_WifiSetVendorIe = 314,
  /*
   *  Req_WifiSetVendorIeCb             = 315; //0x13b
   */
  /*
   *0x13b
   */
  CTRL_MSG_ID__Req_WifiSetEventMask = 315,
  /*
   *0x13c
   */
  CTRL_MSG_ID__Req_WifiGetEventMask = 316,
  /*
   *0x13d
   */
  CTRL_MSG_ID__Req_Wifi80211Tx = 317,
  /*
   *	Req_WifiSetCsiRxCb                = 318; //0x13e
   */
  /*
   *0x13e
   */
  CTRL_MSG_ID__Req_WifiSetCsiConfig = 318,
  /*
   *0x13f
   */
  CTRL_MSG_ID__Req_WifiSetCsi = 319,
  /*
   *0x140
   */
  CTRL_MSG_ID__Req_WifiSetAntGpio = 320,
  /*
   *0x141
   */
  CTRL_MSG_ID__Req_WifiGetAntGpio = 321,
  /*
   *0x142
   */
  CTRL_MSG_ID__Req_WifiSetAnt = 322,
  /*
   *0x143
   */
  CTRL_MSG_ID__Req_WifiGetAnt = 323,
  /*
   *0x144
   */
  CTRL_MSG_ID__Req_WifiGetTsfTime = 324,
  /*
   *0x145
   */
  CTRL_MSG_ID__Req_WifiSetInactiveTime = 325,
  /*
   *0x146
   */
  CTRL_MSG_ID__Req_WifiGetInactiveTime = 326,
  /*
   *0x147
   */
  CTRL_MSG_ID__Req_WifiStatisDump = 327,
  /*
   *0x148
   */
  CTRL_MSG_ID__Req_WifiSetRssiThreshold = 328,
  /*
   *0x149
   */
  CTRL_MSG_ID__Req_WifiFtmInitiateSession = 329,
  /*
   *0x14a
   */
  CTRL_MSG_ID__Req_WifiFtmEndSession = 330,
  /*
   *0x14b
   */
  CTRL_MSG_ID__Req_WifiFtmRespSetOffset = 331,
  /*
   *0x14c
   */
  CTRL_MSG_ID__Req_WifiConfig11bRate = 332,
  /*
   *0x14d
   */
  CTRL_MSG_ID__Req_WifiConnectionlessModuleSetWakeInterval = 333,
  /*
   *0x14e
   */
  CTRL_MSG_ID__Req_WifiSetCountryCode = 334,
  /*
   *0x14f
   */
  CTRL_MSG_ID__Req_WifiGetCountryCode = 335,
  /*
   *0x150
   */
  CTRL_MSG_ID__Req_WifiConfig80211TxRate = 336,
  /*
   *0x151
   */
  CTRL_MSG_ID__Req_WifiDisablePmfConfig = 337,
  /*
   *0x152
   */
  CTRL_MSG_ID__Req_WifiStaGetAid = 338,
  /*
   *0x153
   */
  CTRL_MSG_ID__Req_WifiStaGetNegotiatedPhymode = 339,
  /*
   *0x154
   */
  CTRL_MSG_ID__Req_WifiSetDynamicCs = 340,
  /*
   * Add new control path command response before Req_Max
   * and update Req_Max 
   */
  /*
   *0x155
   */
  CTRL_MSG_ID__Req_Max = 341,
  /*
   ** Response Msgs *
   */
  CTRL_MSG_ID__Resp_Base = 512,
  CTRL_MSG_ID__Resp_GetMACAddress = 513,
  CTRL_MSG_ID__Resp_SetMacAddress = 514,
  CTRL_MSG_ID__Resp_GetWifiMode = 515,
  CTRL_MSG_ID__Resp_SetWifiMode = 516,
  CTRL_MSG_ID__Resp_GetAPScanList = 517,
  CTRL_MSG_ID__Resp_GetAPConfig = 518,
  CTRL_MSG_ID__Resp_ConnectAP = 519,
  CTRL_MSG_ID__Resp_DisconnectAP = 520,
  CTRL_MSG_ID__Resp_GetSoftAPConfig = 521,
  CTRL_MSG_ID__Resp_SetSoftAPVendorSpecificIE = 522,
  CTRL_MSG_ID__Resp_StartSoftAP = 523,
  CTRL_MSG_ID__Resp_GetSoftAPConnectedSTAList = 524,
  CTRL_MSG_ID__Resp_StopSoftAP = 525,
  CTRL_MSG_ID__Resp_WifiSetPs = 526,
  CTRL_MSG_ID__Resp_WifiGetPs = 527,
  CTRL_MSG_ID__Resp_OTABegin = 528,
  CTRL_MSG_ID__Resp_OTAWrite = 529,
  CTRL_MSG_ID__Resp_OTAEnd = 530,
  CTRL_MSG_ID__Resp_WifiSetMaxTxPower = 531,
  CTRL_MSG_ID__Resp_WifiGetMaxTxPower = 532,
  CTRL_MSG_ID__Resp_ConfigHeartbeat = 533,
  CTRL_MSG_ID__Resp_WifiInit = 534,
  CTRL_MSG_ID__Resp_WifiDeinit = 535,
  CTRL_MSG_ID__Resp_WifiStart = 536,
  CTRL_MSG_ID__Resp_WifiStop = 537,
  CTRL_MSG_ID__Resp_WifiConnect = 538,
  CTRL_MSG_ID__Resp_WifiDisconnect = 539,
  CTRL_MSG_ID__Resp_WifiSetConfig = 540,
  CTRL_MSG_ID__Resp_WifiGetConfig = 541,
  CTRL_MSG_ID__Resp_WifiScanStart = 542,
  CTRL_MSG_ID__Resp_WifiScanStop = 543,
  CTRL_MSG_ID__Resp_WifiScanGetApNum = 544,
  CTRL_MSG_ID__Resp_WifiScanGetApRecords = 545,
  CTRL_MSG_ID__Resp_WifiClearApList = 546,
  CTRL_MSG_ID__Resp_WifiRestore = 547,
  CTRL_MSG_ID__Resp_WifiClearFastConnect = 548,
  CTRL_MSG_ID__Resp_WifiDeauthSta = 549,
  CTRL_MSG_ID__Resp_WifiStaGetApInfo = 550,
  /*
   *Resp_WifiSetPs                    = 551;
   *Resp_WifiGetPs                    = 552;
   */
  CTRL_MSG_ID__Resp_WifiSetProtocol = 553,
  CTRL_MSG_ID__Resp_WifiGetProtocol = 554,
  CTRL_MSG_ID__Resp_WifiSetBandwidth = 555,
  CTRL_MSG_ID__Resp_WifiGetBandwidth = 556,
  CTRL_MSG_ID__Resp_WifiSetChannel = 557,
  CTRL_MSG_ID__Resp_WifiGetChannel = 558,
  CTRL_MSG_ID__Resp_WifiSetCountry = 559,
  CTRL_MSG_ID__Resp_WifiGetCountry = 560,
  /*
   *  Resp_WifiSetPromiscuousRxCb       = 561;
   */
  CTRL_MSG_ID__Resp_WifiSetPromiscuous = 561,
  CTRL_MSG_ID__Resp_WifiGetPromiscuous = 562,
  CTRL_MSG_ID__Resp_WifiSetPromiscuousFilter = 563,
  CTRL_MSG_ID__Resp_WifiGetPromiscuousFilter = 564,
  CTRL_MSG_ID__Resp_WifiSetPromiscuousCtrlFilter = 565,
  CTRL_MSG_ID__Resp_WifiGetPromiscuousCtrlFilter = 566,
  CTRL_MSG_ID__Resp_WifiApGetStaList = 567,
  CTRL_MSG_ID__Resp_WifiApGetStaAid = 568,
  CTRL_MSG_ID__Resp_WifiSetStorage = 569,
  CTRL_MSG_ID__Resp_WifiSetVendorIe = 570,
  /*
   *  Resp_WifiSetVendorIeCb            = 571;
   */
  CTRL_MSG_ID__Resp_WifiSetEventMask = 571,
  CTRL_MSG_ID__Resp_WifiGetEventMask = 572,
  CTRL_MSG_ID__Resp_Wifi80211Tx = 573,
  /*
   *	Resp_WifiSetCsiRxCb               = 573;
   */
  CTRL_MSG_ID__Resp_WifiSetCsiConfig = 574,
  CTRL_MSG_ID__Resp_WifiSetCsi = 575,
  CTRL_MSG_ID__Resp_WifiSetAntGpio = 576,
  CTRL_MSG_ID__Resp_WifiGetAntGpio = 577,
  CTRL_MSG_ID__Resp_WifiSetAnt = 578,
  CTRL_MSG_ID__Resp_WifiGetAnt = 579,
  CTRL_MSG_ID__Resp_WifiGetTsfTime = 580,
  CTRL_MSG_ID__Resp_WifiSetInactiveTime = 581,
  CTRL_MSG_ID__Resp_WifiGetInactiveTime = 582,
  CTRL_MSG_ID__Resp_WifiStatisDump = 583,
  CTRL_MSG_ID__Resp_WifiSetRssiThreshold = 584,
  CTRL_MSG_ID__Resp_WifiFtmInitiateSession = 585,
  CTRL_MSG_ID__Resp_WifiFtmEndSession = 586,
  CTRL_MSG_ID__Resp_WifiFtmRespSetOffset = 587,
  CTRL_MSG_ID__Resp_WifiConfig11bRate = 588,
  CTRL_MSG_ID__Resp_WifiConnectionlessModuleSetWakeInterval = 589,
  CTRL_MSG_ID__Resp_WifiSetCountryCode = 590,
  CTRL_MSG_ID__Resp_WifiGetCountryCode = 591,
  CTRL_MSG_ID__Resp_WifiConfig80211TxRate = 592,
  CTRL_MSG_ID__Resp_WifiDisablePmfConfig = 593,
  CTRL_MSG_ID__Resp_WifiStaGetAid = 594,
  CTRL_MSG_ID__Resp_WifiStaGetNegotiatedPhymode = 595,
  CTRL_MSG_ID__Resp_WifiSetDynamicCs = 596,
  /*
   * Add new control path command response before Resp_Max
   * and update Resp_Max 
   */
  CTRL_MSG_ID__Resp_Max = 597,
  /*
   ** Event Msgs *
   */
  CTRL_MSG_ID__Event_Base = 768,
  CTRL_MSG_ID__Event_ESPInit = 769,
  CTRL_MSG_ID__Event_Heartbeat = 770,
  CTRL_MSG_ID__Event_StationDisconnectFromAP = 771,
  CTRL_MSG_ID__Event_AP_StaConnected = 772,
  CTRL_MSG_ID__Event_AP_StaDisconnected = 773,
  CTRL_MSG_ID__Event_WifiEventNoArgs = 774,
  CTRL_MSG_ID__Event_StaScanDone = 775,
  /*
   * Add new control path command notification before Event_Max
   * and update Event_Max 
   */
  CTRL_MSG_ID__Event_Max = 776
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG_ID)
} CtrlMsgId;

/* --- messages --- */

struct  WifiInitConfig
{
  ProtobufCMessage base;
  /*
   **< WiFi static RX buffer number 
   */
  int32_t static_rx_buf_num;
  /*
   **< WiFi dynamic RX buffer number 
   */
  int32_t dynamic_rx_buf_num;
  /*
   **< WiFi TX buffer type 
   */
  int32_t tx_buf_type;
  /*
   **< WiFi static TX buffer number 
   */
  int32_t static_tx_buf_num;
  /*
   **< WiFi dynamic TX buffer number 
   */
  int32_t dynamic_tx_buf_num;
  /*
   **< WiFi TX cache buffer number 
   */
  int32_t cache_tx_buf_num;
  /*
   **< WiFi channel state information enable flag 
   */
  int32_t csi_enable;
  /*
   **< WiFi AMPDU RX feature enable flag 
   */
  int32_t ampdu_rx_enable;
  /*
   **< WiFi AMPDU TX feature enable flag 
   */
  int32_t ampdu_tx_enable;
  /*
   **< WiFi AMSDU TX feature enable flag 
   */
  int32_t amsdu_tx_enable;
  /*
   **< WiFi NVS flash enable flag 
   */
  int32_t nvs_enable;
  /*
   **< Nano option for printf/scan family enable flag 
   */
  int32_t nano_enable;
  /*
   **< WiFi Block Ack RX window size 
   */
  int32_t rx_ba_win;
  /*
   **< WiFi Task Core ID 
   */
  int32_t wifi_task_core_id;
  /*
   **< WiFi softAP maximum length of the beacon 
   */
  int32_t beacon_max_len;
  /*
   **< WiFi management short buffer number, the minimum value is 6, the maximum value is 32 
   */
  int32_t mgmt_sbuf_num;
  /*
   **< Enables additional WiFi features and capabilities 
   */
  uint64_t feature_caps;
  /*
   **< WiFi Power Management for station at disconnected status 
   */
  protobuf_c_boolean sta_disconnected_pm;
  /*
   **< Maximum encrypt number of peers supported by espnow 
   */
  int32_t espnow_max_encrypt_num;
  /*
   **< WiFi init magic number, it should be the last field 
   */
  int32_t magic;
};
#define WIFI_INIT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_init_config__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  WifiCountry
{
  ProtobufCMessage base;
  /*
   **< country code string of 3 chars
   */
  ProtobufCBinaryData cc;
  /*
   **< start channel 
   */
  uint32_t schan;
  /*
   **< total channel number 
   */
  uint32_t nchan;
  /*
   **< This field is used for getting WiFi maximum transmitting power,
   *call esp_wifi_set_max_tx_power to set the maximum transmitting power. 
   */
  int32_t max_tx_power;
  /*
   **< country policy 
   */
  int32_t policy;
};
#define WIFI_COUNTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_country__descriptor) \
    , {0,NULL}, 0, 0, 0, 0 }


struct  WifiActiveScanTime
{
  ProtobufCMessage base;
  /*
   **< minimum active scan time per channel, units: millisecond 
   */
  uint32_t min;
  /*
   **< maximum active scan time per channel, units: millisecond, values above 1500ms may
   *cause station to disconnect from AP and are not recommended.  
   */
  uint32_t max;
};
#define WIFI_ACTIVE_SCAN_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_active_scan_time__descriptor) \
    , 0, 0 }


struct  WifiScanTime
{
  ProtobufCMessage base;
  /*
   **< active scan time per channel, units: millisecond. 
   */
  WifiActiveScanTime *active;
  /*
   **< passive scan time per channel, units: millisecond, values above 1500ms may
   *cause station to disconnect from AP and are not recommended. 
   */
  uint32_t passive;
};
#define WIFI_SCAN_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_scan_time__descriptor) \
    , NULL, 0 }


struct  WifiScanConfig
{
  ProtobufCMessage base;
  /*
   **< SSID of AP 33char
   */
  ProtobufCBinaryData ssid;
  /*
   **< MAC address of AP 6char 
   */
  ProtobufCBinaryData bssid;
  /*
   **< channel, scan the specific channel 
   */
  uint32_t channel;
  /*
   **< enable to scan AP whose SSID is hidden 
   */
  protobuf_c_boolean show_hidden;
  /*
   **< scan type, active or passive 
   */
  int32_t scan_type;
  /*
   **< scan time per channel 
   */
  WifiScanTime *scan_time;
  protobuf_c_boolean block;
};
#define WIFI_SCAN_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_scan_config__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, NULL, 0 }


struct  WifiApRecord
{
  ProtobufCMessage base;
  /*
   **< MAC address of AP 6char 
   */
  ProtobufCBinaryData bssid;
  /*
   **< SSID of AP 33char 
   */
  ProtobufCBinaryData ssid;
  /*
   **< channel of AP 
   */
  uint32_t primary;
  /*
   **< secondary channel of AP 
   */
  int32_t second;
  /*
   **< signal strength of AP 
   */
  int32_t rssi;
  /*
   **< authmode of AP 
   */
  int32_t authmode;
  /*
   **< pairwise cipher of AP 
   */
  int32_t pairwise_cipher;
  /*
   **< group cipher of AP 
   */
  int32_t group_cipher;
  /*
   **< antenna used to receive beacon from AP 
   */
  int32_t ant;
  /*
   *uint32_t phy_11b:1;                        **< bit: 0 flag to identify if 11b mode is enabled or not * 
   *uint32_t phy_11g:1;                        **< bit: 1 flag to identify if 11g mode is enabled or not * 
   *uint32_t phy_11n:1;                        **< bit: 2 flag to identify if 11n mode is enabled or not * 
   *uint32_t phy_lr:1;                         **< bit: 3 flag to identify if low rate is enabled or not * 
   *uint32_t wps:1;                            **< bit: 4 flag to identify if WPS is supported or not * 
   *uint32_t ftm_responder:1;                  **< bit: 5 flag to identify if FTM is supported in responder mode * 
   *uint32_t ftm_initiator:1;                  **< bit: 6 flag to identify if FTM is supported in initiator mode * 
   *uint32_t reserved:25;                      **< bit: 7..31 reserved * 
   */
  /*
   * Manually have to parse for above bits 
   */
  uint32_t bitmask;
  /*
   **< country information of AP 
   */
  WifiCountry *country;
};
#define WIFI_AP_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ap_record__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  WifiScanThreshold
{
  ProtobufCMessage base;
  /*
   **< The minimum rssi to accept in the fast scan mode 
   */
  int32_t rssi;
  /*
   **< The weakest authmode to accept in the fast scan mode
   *Note: Incase this value is not set and password is set as per WPA2 standards(password len >= 8),
   *it will be defaulted to WPA2 and device won't connect to deprecated WEP/WPA networks.
   *Please set authmode threshold as WIFI_AUTH_WEP/WIFI_AUTH_WPA_PSK to connect to WEP/WPA networks 
   */
  int32_t authmode;
};
#define WIFI_SCAN_THRESHOLD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_scan_threshold__descriptor) \
    , 0, 0 }


struct  WifiPmfConfig
{
  ProtobufCMessage base;
  /*
   **< Deprecated variable. Device will always connect in PMF mode if other device also advertizes PMF capability. 
   */
  protobuf_c_boolean capable;
  /*
   **< Advertizes that Protected Management Frame is required. Device will not associate to non-PMF capable devices. 
   */
  protobuf_c_boolean required;
};
#define WIFI_PMF_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_pmf_config__descriptor) \
    , 0, 0 }


struct  WifiApConfig
{
  ProtobufCMessage base;
  /*
   **< SSID of ESP32 soft-AP. If ssid_len field is 0, this must be a Null terminated string. Otherwise, length is set according to ssid_len. 32 char
   */
  ProtobufCBinaryData ssid;
  /*
   **< Password of ESP32 soft-AP. 64 char
   */
  ProtobufCBinaryData password;
  /*
   **< Optional length of SSID field. 
   */
  uint32_t ssid_len;
  /*
   **< Channel of ESP32 soft-AP 
   */
  uint32_t channel;
  /*
   **< Auth mode of ESP32 soft-AP. Do not support AUTH_WEP in soft-AP mode 
   */
  int32_t authmode;
  /*
   **< Broadcast SSID or not, default 0, broadcast the SSID 
   */
  uint32_t ssid_hidden;
  /*
   **< Max number of stations allowed to connect in 
   */
  uint32_t max_connection;
  /*
   **< Beacon interval which should be multiples of 100. Unit: TU(time unit, 1 TU = 1024 us). Range: 100 ~ 60000. Default value: 100 
   */
  uint32_t beacon_interval;
  /*
   **< pairwise cipher of SoftAP, group cipher will be derived using this.
   *cipher values are valid starting from WIFI_CIPHER_TYPE_TKIP, enum values before that will be considered as invalid and default cipher suites(TKIP+CCMP) will be used.
   *Valid cipher suites in softAP mode are WIFI_CIPHER_TYPE_TKIP, WIFI_CIPHER_TYPE_CCMP and WIFI_CIPHER_TYPE_TKIP_CCMP. 
   */
  int32_t pairwise_cipher;
  /*
   **< Enable FTM Responder mode 
   */
  protobuf_c_boolean ftm_responder;
  /*
   **< Configuration for Protected Management Frame 
   */
  WifiPmfConfig *pmf_cfg;
};
#define WIFI_AP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ap_config__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


struct  WifiStaConfig
{
  ProtobufCMessage base;
  /*
   **< SSID of target AP. 32char 
   */
  ProtobufCBinaryData ssid;
  /*
   **< Password of target AP. 64char 
   */
  ProtobufCBinaryData password;
  /*
   **< do all channel scan or fast scan 
   */
  int32_t scan_method;
  /*
   **< whether set MAC address of target AP or not. Generally, station_config.bssid_set needs to be 0,
   *and it needs to be 1 only when users need to check the MAC address of the AP.
   */
  protobuf_c_boolean bssid_set;
  /*
   **< MAC address of target AP 6char 
   */
  ProtobufCBinaryData bssid;
  /*
   **< channel of target AP. Set to 1~13 to scan starting from the specified channel
   *before connecting to AP. If the channel of AP is unknown, set it to 0.
   */
  uint32_t channel;
  /*
   **< Listen interval for ESP32 station to receive beacon when WIFI_PS_MAX_MODEM is set.
   *Units: AP beacon intervals. Defaults to 3 if set to 0. 
   */
  uint32_t listen_interval;
  /*
   **< sort the connect AP in the list by rssi or security mode 
   */
  int32_t sort_method;
  /*
   **< When sort_method is set, only APs which have an auth mode that is more secure
   *than the selected auth mode and a signal stronger than the minimum RSSI will be used. 
   */
  WifiScanThreshold *threshold;
  /*
   **< Configuration for Protected Management Frame. Will be advertized in RSN Capabilities in RSN IE. 
   */
  WifiPmfConfig *pmf_cfg;
  /*
   *uint32_t rm_enabled:1;                     **< Whether Radio Measurements are enabled for the connection * 
   *uint32_t btm_enabled:1;                    **< Whether BSS Transition Management is enabled for the connection * 
   *uint32_t mbo_enabled:1;                    **< Whether MBO is enabled for the connection * 
   *uint32_t ft_enabled:1;                     **< Whether FT is enabled for the connection * 
   *uint32_t owe_enabled:1;                    **< Whether OWE is enabled for the connection * 
   *uint32_t transition_disable:1;             **< Whether to enable transition disable feature * 
   *uint32_t reserved:26;                      **< Reserved for future feature set * 
   */
  uint32_t bitmask;
  /*
   **< Whether SAE hash to element is enabled 
   */
  int32_t sae_pwe_h2e;
  /*
   **< Number of connection retries station will do before moving to next AP.
   *scan_method should be set as WIFI_ALL_CHANNEL_SCAN to use this config.
   *Note: Enabling this may cause connection time to increase incase best AP doesn't behave properly. 
   */
  uint32_t failure_retry_cnt;
};
#define WIFI_STA_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_sta_config__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, {0,NULL}, 0, 0, 0, NULL, NULL, 0, 0, 0 }


typedef enum {
  WIFI_CONFIG__U__NOT_SET = 0,
  WIFI_CONFIG__U_AP = 1,
  WIFI_CONFIG__U_STA = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WIFI_CONFIG__U__CASE)
} WifiConfig__UCase;

struct  WifiConfig
{
  ProtobufCMessage base;
  WifiConfig__UCase u_case;
  union {
    /*
     **< configuration of AP 
     */
    WifiApConfig *ap;
    /*
     **< configuration of STA 
     */
    WifiStaConfig *sta;
  };
};
#define WIFI_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_config__descriptor) \
    , WIFI_CONFIG__U__NOT_SET, {0} }


struct  WifiStaInfo
{
  ProtobufCMessage base;
  /*
   **< mac address 6 char 
   */
  ProtobufCBinaryData mac;
  /*
   **< current average rssi of sta connected 
   */
  int32_t rssi;
  /*
   *uint32_t phy_11b:1;                        **< bit: 0 flag to identify if 11b mode is enabled or not * 
   *uint32_t phy_11g:1;                        **< bit: 1 flag to identify if 11g mode is enabled or not * 
   *uint32_t phy_11n:1;                        **< bit: 2 flag to identify if 11n mode is enabled or not * 
   *uint32_t phy_lr:1;                         **< bit: 3 flag to identify if low rate is enabled or not * 
   *uint32_t is_mesh_child:1;                  **< bit: 4 flag to identify mesh child * 
   *uint32_t reserved:27;                      **< bit: 5..31 reserved * 
   */
  uint32_t bitmask;
};
#define WIFI_STA_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_sta_info__descriptor) \
    , {0,NULL}, 0, 0 }


struct  WifiStaList
{
  ProtobufCMessage base;
  /*
   **< station list 
   */
  size_t n_sta;
  WifiStaInfo **sta;
  /*
   **< number of stations in the list (other entries are invalid) 
   */
  int32_t num;
};
#define WIFI_STA_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_sta_list__descriptor) \
    , 0,NULL, 0 }


struct  VendorIeData
{
  ProtobufCMessage base;
  /*
   **< Should be set to WIFI_VENDOR_IE_ELEMENT_ID (0xDD) 
   */
  uint32_t element_id;
  /*
   **< Length of all bytes in the element data following this field. Minimum 4. 
   */
  uint32_t length;
  /*
   **< Vendor identifier (OUI). 3 chars 
   */
  ProtobufCBinaryData vendor_oui;
  /*
   **< Vendor-specific OUI type. 
   */
  uint32_t vendor_oui_type;
  /*
   **< Payload. Length is equal to value in 'length' field, minus 4. Note: Variable size 
   */
  ProtobufCBinaryData payload;
};
#define VENDOR_IE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vendor_ie_data__descriptor) \
    , 0, 0, {0,NULL}, 0, {0,NULL} }


struct  WifiPktRxCtrl
{
  ProtobufCMessage base;
  /*
   **< 8bits Received Signal Strength Indicator(RSSI) of packet. unit: dBm 
   */
  int32_t rssi;
  /*
   **< 5bits PHY rate encoding of the packet. Only valid for non HT(11bg) packet 
   */
  uint32_t rate;
  /*
   *uint32 :1;                                 **< reserved * 
   */
  /*
   **< 2bits 0: non HT(11bg) packet; 1: HT(11n) packet; 3: VHT(11ac) packet 
   */
  uint32_t sig_mode;
  /*
   *uint32 :16;                                **< reserved * 
   */
  /*
   **< 7bits Modulation Coding Scheme. If is HT(11n) packet, shows the modulation, range from 0 to 76(MSC0 ~ MCS76) 
   */
  uint32_t mcs;
  /*
   **< 1bit Channel Bandwidth of the packet. 0: 20MHz; 1: 40MHz 
   */
  uint32_t cwb;
  /*
   *uint32 :16;                                **< reserved * 
   */
  /*
   **< 1bit reserved 
   */
  uint32_t smoothing;
  /*
   **< 1bit reserved 
   */
  uint32_t not_sounding;
  /*
   *uint32 :1;                                 **< reserved * 
   */
  /*
   **< 1bit Aggregation. 0: MPDU packet; 1: AMPDU packet 
   */
  uint32_t aggregation;
  /*
   **< 2bits Space Time Block Code(STBC). 0: non STBC packet; 1: STBC packet 
   */
  uint32_t stbc;
  /*
   **< 1bit Flag is set for 11n packets which are LDPC 
   */
  uint32_t fec_coding;
  /*
   **< 1bit Short Guide Interval(SGI). 0: Long GI; 1: Short GI 
   */
  uint32_t sgi;
  /*
   **< 8bits noise floor of Radio Frequency Module(RF). unit: dBm
   */
  int32_t noise_floor;
  /*
   **< 8bits ampdu cnt 
   */
  uint32_t ampdu_cnt;
  /*
   **< 4bits primary channel on which this packet is received 
   */
  uint32_t channel;
  /*
   **< 4bits secondary channel on which this packet is received. 0: none; 1: above; 2: below 
   */
  uint32_t secondary_channel;
  /*
   *uint32 :8;                                 **< reserved * 
   */
  /*
   **< 32bit timestamp. The local time when this packet is received. It is precise only if modem sleep or light sleep is not enabled. unit: microsecond 
   */
  uint32_t timestamp;
  /*
   *uint32 :32;                                **< reserved * 
   *unsigned :32;                              **< reserved * 
   *unsigned :31;                              **< reserved * 
   */
  /*
   **< 1bit antenna number from which this packet is received. 0: WiFi antenna 0; 1: WiFi antenna 1 
   */
  uint32_t ant;
  /*
   **<  12bits length of packet including Frame Check Sequence(FCS) 
   */
  uint32_t sig_len;
  /*
   *unsigned :12;                              **< reserved * 
   */
  /*
   **< 8bits state of the packet. 0: no error; others: error numbers which are not public 
   */
  uint32_t rx_state;
};
#define WIFI_PKT_RX_CTRL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_pkt_rx_ctrl__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  WifiPromiscuousPkt
{
  ProtobufCMessage base;
  /*
   **< metadata header 
   */
  WifiPktRxCtrl *rx_ctrl;
  /*
   **< Note: variable length. Data or management payload. Length of payload is described by rx_ctrl.sig_len. Type of content determined by packet type argument of callback. 
   */
  ProtobufCBinaryData payload;
};
#define WIFI_PROMISCUOUS_PKT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_promiscuous_pkt__descriptor) \
    , NULL, {0,NULL} }


struct  WifiPromiscuousFilter
{
  ProtobufCMessage base;
  /*
   **< OR of one or more filter values WIFI_PROMIS_FILTER_* 
   */
  uint32_t filter_mask;
};
#define WIFI_PROMISCUOUS_FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_promiscuous_filter__descriptor) \
    , 0 }


struct  WifiCsiConfig
{
  ProtobufCMessage base;
  /*
   **< enable to receive legacy long training field(lltf) data. Default enabled 
   */
  protobuf_c_boolean lltf_en;
  /*
   **< enable to receive HT long training field(htltf) data. Default enabled 
   */
  protobuf_c_boolean htltf_en;
  /*
   **< enable to receive space time block code HT long training field(stbc-htltf2) data. Default enabled 
   */
  protobuf_c_boolean stbc_htltf2_en;
  /*
   **< enable to generate htlft data by averaging lltf and ht_ltf data when receiving HT packet. Otherwise, use ht_ltf data directly. Default enabled 
   */
  protobuf_c_boolean ltf_merge_en;
  /*
   **< enable to turn on channel filter to smooth adjacent sub-carrier. Disable it to keep independence of adjacent sub-carrier. Default enabled 
   */
  protobuf_c_boolean channel_filter_en;
  /*
   **< manually scale the CSI data by left shifting or automatically scale the CSI data.
   *If set true, please set the shift bits. false: automatically. true: manually. Default false 
   */
  protobuf_c_boolean manu_scale;
  /*
   **< manually left shift bits of the scale of the CSI data. The range of the left shift bits is 0~15 
   */
  uint32_t shift;
};
#define WIFI_CSI_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_csi_config__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  WifiCsiInfo
{
  ProtobufCMessage base;
  /*
   **< received packet radio metadata header of the CSI data 
   */
  WifiPktRxCtrl *rx_ctrl;
  /*
   **< 6bits source MAC address of the CSI data 
   */
  ProtobufCBinaryData mac;
  /*
   **< 6bits destination MAC address of the CSI data 
   */
  ProtobufCBinaryData dmac;
  /*
   **< first four bytes of the CSI data is invalid or not 
   */
  protobuf_c_boolean first_word_invalid;
  /*
   **< Note: variable length. buffer of CSI data 
   */
  ProtobufCBinaryData buf;
  /*
   **< length of CSI data 
   */
  uint32_t len;
};
#define WIFI_CSI_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_csi_info__descriptor) \
    , NULL, {0,NULL}, {0,NULL}, 0, {0,NULL}, 0 }


struct  WifiAntGpio
{
  ProtobufCMessage base;
  /*
   **< 1bit Whether this GPIO is connected to external antenna switch 
   */
  uint32_t gpio_select;
  /*
   **< 7bits The GPIO number that connects to external antenna switch 
   */
  uint32_t gpio_num;
};
#define WIFI_ANT_GPIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ant_gpio__descriptor) \
    , 0, 0 }


struct  WifiAntGpioConfig
{
  ProtobufCMessage base;
  /*
   **< The configurations of GPIOs that connect to external antenna switch 
   */
  size_t n_gpio_cfgs;
  WifiAntGpio **gpio_cfgs;
};
#define WIFI_ANT_GPIO_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ant_gpio_config__descriptor) \
    , 0,NULL }


struct  WifiAntConfig
{
  ProtobufCMessage base;
  /*
   **< WiFi antenna mode for receiving 
   */
  int32_t rx_ant_mode;
  /*
   **< Default antenna mode for receiving, it's ignored if rx_ant_mode is not WIFI_ANT_MODE_AUTO 
   */
  int32_t rx_ant_default;
  /*
   **< WiFi antenna mode for transmission, it can be set to WIFI_ANT_MODE_AUTO only if rx_ant_mode is set to WIFI_ANT_MODE_AUTO 
   */
  int32_t tx_ant_mode;
  /*
   **< 4bits Index (in antenna GPIO configuration) of enabled WIFI_ANT_MODE_ANT0 
   */
  uint32_t enabled_ant0;
  /*
   **< 4bits Index (in antenna GPIO configuration) of enabled WIFI_ANT_MODE_ANT1 
   */
  uint32_t enabled_ant1;
};
#define WIFI_ANT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ant_config__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  WifiActionTxReq
{
  ProtobufCMessage base;
  /*
   **< WiFi interface to send request to 
   */
  int32_t ifx;
  /*
   **< 6bits Destination MAC address 
   */
  ProtobufCBinaryData dest_mac;
  /*
   **< Indicates no ack required 
   */
  protobuf_c_boolean no_ack;
  /*
   *TODO
   *wifi_action_rx_cb_t rx_cb;                 **< Rx Callback to receive any response * 
   */
  /*
   **< Length of the appended Data 
   */
  uint32_t data_len;
  /*
   **< note: variable length. Appended Data payload 
   */
  ProtobufCBinaryData data;
};
#define WIFI_ACTION_TX_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_action_tx_req__descriptor) \
    , 0, {0,NULL}, 0, 0, {0,NULL} }


struct  WifiFtmInitiatorCfg
{
  ProtobufCMessage base;
  /*
   **< 6bits MAC address of the FTM Responder 
   */
  ProtobufCBinaryData resp_mac;
  /*
   **< Primary channel of the FTM Responder 
   */
  uint32_t channel;
  /*
   **< No. of FTM frames requested in terms of 4 or 8 bursts (allowed values - 0(No pref), 16, 24, 32, 64) 
   */
  uint32_t frm_count;
  /*
   **< Requested time period between consecutive FTM bursts in 100's of milliseconds (0 - No pref) 
   */
  uint32_t burst_period;
};
#define WIFI_FTM_INITIATOR_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ftm_initiator_cfg__descriptor) \
    , {0,NULL}, 0, 0, 0 }


struct  WifiEventStaScanDone
{
  ProtobufCMessage base;
  /*
   **< status of scanning APs: 0 — success, 1 - failure 
   */
  uint32_t status;
  /*
   **< number of scan results 
   */
  uint32_t number;
  /*
   **< scan sequence number, used for block scan 
   */
  uint32_t scan_id;
};
#define WIFI_EVENT_STA_SCAN_DONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_scan_done__descriptor) \
    , 0, 0, 0 }


struct  WifiEventStaConnected
{
  ProtobufCMessage base;
  /*
   **< 32bytes SSID of connected AP 
   */
  ProtobufCBinaryData ssid;
  /*
   **< SSID length of connected AP 
   */
  uint32_t ssid_len;
  /*
   **< 6bytes BSSID of connected AP
   */
  ProtobufCBinaryData bssid;
  /*
   **< channel of connected AP
   */
  uint32_t channel;
  /*
   **< authentication mode used by AP
   */
  int32_t authmode;
};
#define WIFI_EVENT_STA_CONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_connected__descriptor) \
    , {0,NULL}, 0, {0,NULL}, 0, 0 }


struct  WifiEventStaDisconnected
{
  ProtobufCMessage base;
  /*
   **< SSID of disconnected AP 
   */
  ProtobufCBinaryData ssid;
  /*
   **< SSID length of disconnected AP 
   */
  uint32_t ssid_len;
  /*
   **< BSSID of disconnected AP 
   */
  ProtobufCBinaryData bssid;
  /*
   **< reason of disconnection 
   */
  uint32_t reason;
  /*
   **< rssi of disconnection 
   */
  int32_t rssi;
};
#define WIFI_EVENT_STA_DISCONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_disconnected__descriptor) \
    , {0,NULL}, 0, {0,NULL}, 0, 0 }


struct  WifiEventStaAuthmodeChange
{
  ProtobufCMessage base;
  /*
   **< the old auth mode of AP 
   */
  int32_t old_mode;
  /*
   **< the new auth mode of AP 
   */
  int32_t new_mode;
};
#define WIFI_EVENT_STA_AUTHMODE_CHANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_authmode_change__descriptor) \
    , 0, 0 }


struct  WifiEventStaWpsErPin
{
  ProtobufCMessage base;
  /*
   **< 8bytes PIN code of station in enrollee mode 
   */
  ProtobufCBinaryData pin_code;
};
#define WIFI_EVENT_STA_WPS_ER_PIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_wps_er_pin__descriptor) \
    , {0,NULL} }


struct  ApCred
{
  ProtobufCMessage base;
  /*
   **< 32bytes SSID of AP 
   */
  ProtobufCBinaryData ssid;
  /*
   **< 64bytes Passphrase for the AP 
   */
  ProtobufCBinaryData passphrase;
};
#define AP_CRED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ap_cred__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  WifiEventStaWpsErSuccess
{
  ProtobufCMessage base;
  /*
   **< Number of AP credentials received 
   */
  uint32_t ap_cred_cnt;
  /*
   **< All AP credentials received from WPS handshake 
   */
  size_t n_ap_creds;
  ApCred **ap_creds;
};
#define WIFI_EVENT_STA_WPS_ER_SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_sta_wps_er_success__descriptor) \
    , 0, 0,NULL }


/*
 ** Argument structure for WIFI_EVENT_AP_PROBEREQRECVED event 
 */
struct  WifiEventApProbeReqRx
{
  ProtobufCMessage base;
  /*
   **< Received probe request signal strength 
   */
  int32_t rssi;
  /*
   **< MAC address of the station which send probe request 
   */
  uint32_t mac;
};
#define WIFI_EVENT_AP_PROBE_REQ_RX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_ap_probe_req_rx__descriptor) \
    , 0, 0 }


/*
 ** Argument structure for WIFI_EVENT_STA_BSS_RSSI_LOW event 
 */
struct  WifiEventBssRssiLow
{
  ProtobufCMessage base;
  /*
   **< RSSI value of bss 
   */
  int32_t rssi;
};
#define WIFI_EVENT_BSS_RSSI_LOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_bss_rssi_low__descriptor) \
    , 0 }


struct  WifiFtmReportEntry
{
  ProtobufCMessage base;
  /*
   * *< Dialog Token of the FTM frame 
   */
  uint32_t dlog_token;
  /*
   * *< RSSI of the FTM frame received 
   */
  int32_t rssi;
  /*
   * *< Round Trip Time in pSec with a peer 
   */
  uint32_t rtt;
  /*
   * TODO: uint32 is supported by proto? 
   */
  /*
   * *< Time of departure of FTM frame from FTM Responder in pSec 
   */
  uint64_t t1;
  /*
   * *< Time of arrival of FTM frame at FTM Initiator in pSec 
   */
  uint64_t t2;
  /*
   * *< Time of departure of ACK from FTM Initiator in pSec 
   */
  uint64_t t3;
  /*
   * *< Time of arrival of ACK at FTM Responder in pSec 
   */
  uint64_t t4;
};
#define WIFI_FTM_REPORT_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_ftm_report_entry__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  WifiEventFtmReport
{
  ProtobufCMessage base;
  /*
   * *< 6bytes MAC address of the FTM Peer 
   */
  ProtobufCBinaryData peer_mac;
  /*
   * *< Status of the FTM operation 
   */
  int32_t status;
  /*
   * *< Raw average Round-Trip-Time with peer in Nano-Seconds 
   */
  uint32_t rtt_raw;
  /*
   * *< Estimated Round-Trip-Time with peer in Nano-Seconds 
   */
  uint32_t rtt_est;
  /*
   * *< Estimated one-way distance in Centi-Meters 
   */
  uint32_t dist_est;
  /*
   * *< Note var len Pointer to FTM Report with multiple entries, should be freed after use 
   */
  size_t n_ftm_report_data;
  WifiFtmReportEntry **ftm_report_data;
  /*
   * *< Number of entries in the FTM Report data 
   */
  uint32_t ftm_report_num_entries;
};
#define WIFI_EVENT_FTM_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_ftm_report__descriptor) \
    , {0,NULL}, 0, 0, 0, 0, 0,NULL, 0 }


struct  WifiEventActionTxStatus
{
  ProtobufCMessage base;
  /*
   **< WiFi interface to send request to 
   */
  int32_t ifx;
  /*
   **< Context to identify the request 
   */
  uint32_t context;
  /*
   **< 6bytes Destination MAC address 
   */
  ProtobufCBinaryData da;
  /*
   **< Status of the operation 
   */
  uint32_t status;
};
#define WIFI_EVENT_ACTION_TX_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_action_tx_status__descriptor) \
    , 0, 0, {0,NULL}, 0 }


struct  WifiEventRocDone
{
  ProtobufCMessage base;
  /*
   **< Context to identify the request 
   */
  uint32_t context;
};
#define WIFI_EVENT_ROC_DONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_roc_done__descriptor) \
    , 0 }


struct  WifiEventApWpsRgPin
{
  ProtobufCMessage base;
  /*
   **< 8bytes PIN code of station in enrollee mode 
   */
  ProtobufCBinaryData pin_code;
};
#define WIFI_EVENT_AP_WPS_RG_PIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_ap_wps_rg_pin__descriptor) \
    , {0,NULL} }


struct  WifiEventApWpsRgFailReason
{
  ProtobufCMessage base;
  /*
   **< WPS failure reason wps_fail_reason_t 
   */
  int32_t reason;
  /*
   **< 6bytes Enrollee mac address 
   */
  ProtobufCBinaryData peer_macaddr;
};
#define WIFI_EVENT_AP_WPS_RG_FAIL_REASON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_ap_wps_rg_fail_reason__descriptor) \
    , 0, {0,NULL} }


struct  WifiEventApWpsRgSuccess
{
  ProtobufCMessage base;
  /*
   **< 6bytes Enrollee mac address 
   */
  ProtobufCBinaryData peer_macaddr;
};
#define WIFI_EVENT_AP_WPS_RG_SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_event_ap_wps_rg_success__descriptor) \
    , {0,NULL} }


/*
 * internal supporting structures for CtrlMsg 
 */
struct  ScanResult
{
  ProtobufCMessage base;
  ProtobufCBinaryData bssid;
  ProtobufCBinaryData ssid;
  uint32_t chnl;
  int32_t rssi;
  int32_t sec_prot;
};
#define SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scan_result__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0 }


struct  ConnectedSTAList
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t rssi;
};
#define CONNECTED_STALIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connected_stalist__descriptor) \
    , {0,NULL}, 0 }


/*
 ** Req/Resp structure *
 */
struct  CtrlMsgReqGetMacAddress
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CTRL_MSG__REQ__GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_mac_address__descriptor) \
    , 0 }


struct  CtrlMsgRespGetMacAddress
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_mac_address__descriptor) \
    , {0,NULL}, 0 }


struct  CtrlMsgReqGetMode
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_mode__descriptor) \
     }


struct  CtrlMsgRespGetMode
{
  ProtobufCMessage base;
  int32_t mode;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_mode__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqSetMode
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CTRL_MSG__REQ__SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_mode__descriptor) \
    , 0 }


struct  CtrlMsgRespSetMode
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_mode__descriptor) \
    , 0 }


struct  CtrlMsgReqGetStatus
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_status__descriptor) \
     }


struct  CtrlMsgRespGetStatus
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_status__descriptor) \
    , 0 }


struct  CtrlMsgReqSetMacAddress
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t mode;
};
#define CTRL_MSG__REQ__SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_mac_address__descriptor) \
    , {0,NULL}, 0 }


struct  CtrlMsgRespSetMacAddress
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_mac_address__descriptor) \
    , 0 }


struct  CtrlMsgReqGetAPConfig
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_apconfig__descriptor) \
     }


/*
 * To be deprecated 
 */
struct  CtrlMsgRespGetAPConfig
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  ProtobufCBinaryData bssid;
  int32_t rssi;
  int32_t chnl;
  int32_t sec_prot;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_apconfig__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0 }


/*
 * To be deprecated 
 */
struct  CtrlMsgReqConnectAP
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  char *bssid;
  protobuf_c_boolean is_wpa3_supported;
  int32_t listen_interval;
};
#define CTRL_MSG__REQ__CONNECT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__connect_ap__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  CtrlMsgRespConnectAP
{
  ProtobufCMessage base;
  int32_t resp;
  ProtobufCBinaryData mac;
};
#define CTRL_MSG__RESP__CONNECT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__connect_ap__descriptor) \
    , 0, {0,NULL} }


struct  CtrlMsgReqGetSoftAPConfig
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_soft_apconfig__descriptor) \
     }


struct  CtrlMsgRespGetSoftAPConfig
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  ProtobufCBinaryData pwd;
  int32_t chnl;
  int32_t sec_prot;
  int32_t max_conn;
  protobuf_c_boolean ssid_hidden;
  int32_t bw;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_soft_apconfig__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, 0, 0, 0, 0 }


struct  CtrlMsgReqStartSoftAP
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  int32_t chnl;
  int32_t sec_prot;
  int32_t max_conn;
  protobuf_c_boolean ssid_hidden;
  int32_t bw;
};
#define CTRL_MSG__REQ__START_SOFT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__start_soft_ap__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0 }


struct  CtrlMsgRespStartSoftAP
{
  ProtobufCMessage base;
  int32_t resp;
  ProtobufCBinaryData mac;
};
#define CTRL_MSG__RESP__START_SOFT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__start_soft_ap__descriptor) \
    , 0, {0,NULL} }


struct  CtrlMsgReqScanResult
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__scan_result__descriptor) \
     }


struct  CtrlMsgRespScanResult
{
  ProtobufCMessage base;
  uint32_t count;
  size_t n_entries;
  ScanResult **entries;
  int32_t resp;
};
#define CTRL_MSG__RESP__SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__scan_result__descriptor) \
    , 0, 0,NULL, 0 }


struct  CtrlMsgReqSoftAPConnectedSTA
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__SOFT_APCONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__soft_apconnected_sta__descriptor) \
     }


struct  CtrlMsgRespSoftAPConnectedSTA
{
  ProtobufCMessage base;
  uint32_t num;
  size_t n_stations;
  ConnectedSTAList **stations;
  int32_t resp;
};
#define CTRL_MSG__RESP__SOFT_APCONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__soft_apconnected_sta__descriptor) \
    , 0, 0,NULL, 0 }


struct  CtrlMsgReqOTABegin
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otabegin__descriptor) \
     }


struct  CtrlMsgRespOTABegin
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otabegin__descriptor) \
    , 0 }


struct  CtrlMsgReqOTAWrite
{
  ProtobufCMessage base;
  ProtobufCBinaryData ota_data;
};
#define CTRL_MSG__REQ__OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otawrite__descriptor) \
    , {0,NULL} }


struct  CtrlMsgRespOTAWrite
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otawrite__descriptor) \
    , 0 }


struct  CtrlMsgReqOTAEnd
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otaend__descriptor) \
     }


struct  CtrlMsgRespOTAEnd
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otaend__descriptor) \
    , 0 }


struct  CtrlMsgReqVendorIEData
{
  ProtobufCMessage base;
  int32_t element_id;
  int32_t length;
  ProtobufCBinaryData vendor_oui;
  int32_t vendor_oui_type;
  ProtobufCBinaryData payload;
};
#define CTRL_MSG__REQ__VENDOR_IEDATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__vendor_iedata__descriptor) \
    , 0, 0, {0,NULL}, 0, {0,NULL} }


struct  CtrlMsgReqSetSoftAPVendorSpecificIE
{
  ProtobufCMessage base;
  protobuf_c_boolean enable;
  int32_t type;
  int32_t idx;
  CtrlMsgReqVendorIEData *vendor_ie_data;
};
#define CTRL_MSG__REQ__SET_SOFT_APVENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_soft_apvendor_specific_ie__descriptor) \
    , 0, 0, 0, NULL }


struct  CtrlMsgRespSetSoftAPVendorSpecificIE
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_SOFT_APVENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_soft_apvendor_specific_ie__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiSetMaxTxPower
{
  ProtobufCMessage base;
  int32_t wifi_max_tx_power;
};
#define CTRL_MSG__REQ__WIFI_SET_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_set_max_tx_power__descriptor) \
    , 0 }


struct  CtrlMsgRespWifiSetMaxTxPower
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_SET_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_set_max_tx_power__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiGetMaxTxPower
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_GET_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_get_max_tx_power__descriptor) \
     }


struct  CtrlMsgRespWifiGetMaxTxPower
{
  ProtobufCMessage base;
  int32_t wifi_curr_tx_power;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_GET_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_get_max_tx_power__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqConfigHeartbeat
{
  ProtobufCMessage base;
  protobuf_c_boolean enable;
  int32_t duration;
};
#define CTRL_MSG__REQ__CONFIG_HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__config_heartbeat__descriptor) \
    , 0, 0 }


struct  CtrlMsgRespConfigHeartbeat
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__CONFIG_HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__config_heartbeat__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiInit
{
  ProtobufCMessage base;
  WifiInitConfig *cfg;
};
#define CTRL_MSG__REQ__WIFI_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_init__descriptor) \
    , NULL }


struct  CtrlMsgRespWifiInit
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_init__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiDeinit
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_DEINIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_deinit__descriptor) \
     }


struct  CtrlMsgRespWifiDeinit
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_DEINIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_deinit__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiSetConfig
{
  ProtobufCMessage base;
  int32_t iface;
  WifiConfig *cfg;
};
#define CTRL_MSG__REQ__WIFI_SET_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_set_config__descriptor) \
    , 0, NULL }


struct  CtrlMsgRespWifiSetConfig
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_SET_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_set_config__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiGetConfig
{
  ProtobufCMessage base;
  int32_t iface;
};
#define CTRL_MSG__REQ__WIFI_GET_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_get_config__descriptor) \
    , 0 }


struct  CtrlMsgRespWifiGetConfig
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t iface;
  WifiConfig *cfg;
};
#define CTRL_MSG__RESP__WIFI_GET_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_get_config__descriptor) \
    , 0, 0, NULL }


struct  CtrlMsgReqWifiConnect
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_connect__descriptor) \
     }


struct  CtrlMsgRespWifiConnect
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_connect__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiDisconnect
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_disconnect__descriptor) \
     }


struct  CtrlMsgRespWifiDisconnect
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_disconnect__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiStart
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_start__descriptor) \
     }


struct  CtrlMsgRespWifiStart
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_start__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiStop
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_stop__descriptor) \
     }


struct  CtrlMsgRespWifiStop
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_stop__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiScanStart
{
  ProtobufCMessage base;
  WifiScanConfig *config;
  protobuf_c_boolean block;
  int32_t config_set;
};
#define CTRL_MSG__REQ__WIFI_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_scan_start__descriptor) \
    , NULL, 0, 0 }


struct  CtrlMsgRespWifiScanStart
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_scan_start__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiScanStop
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_SCAN_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_scan_stop__descriptor) \
     }


struct  CtrlMsgRespWifiScanStop
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_SCAN_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_scan_stop__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiScanGetApNum
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_SCAN_GET_AP_NUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_scan_get_ap_num__descriptor) \
     }


struct  CtrlMsgRespWifiScanGetApNum
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t number;
};
#define CTRL_MSG__RESP__WIFI_SCAN_GET_AP_NUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_scan_get_ap_num__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqWifiScanGetApRecords
{
  ProtobufCMessage base;
  int32_t number;
};
#define CTRL_MSG__REQ__WIFI_SCAN_GET_AP_RECORDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_scan_get_ap_records__descriptor) \
    , 0 }


struct  CtrlMsgRespWifiScanGetApRecords
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t number;
  size_t n_ap_records;
  WifiApRecord **ap_records;
};
#define CTRL_MSG__RESP__WIFI_SCAN_GET_AP_RECORDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_scan_get_ap_records__descriptor) \
    , 0, 0, 0,NULL }


struct  CtrlMsgReqWifiClearApList
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_CLEAR_AP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_clear_ap_list__descriptor) \
     }


struct  CtrlMsgRespWifiClearApList
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_CLEAR_AP_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_clear_ap_list__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiRestore
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_RESTORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_restore__descriptor) \
     }


struct  CtrlMsgRespWifiRestore
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_RESTORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_restore__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiClearFastConnect
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_CLEAR_FAST_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_clear_fast_connect__descriptor) \
     }


struct  CtrlMsgRespWifiClearFastConnect
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__WIFI_CLEAR_FAST_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_clear_fast_connect__descriptor) \
    , 0 }


struct  CtrlMsgReqWifiDeauthSta
{
  ProtobufCMessage base;
  int32_t aid;
};
#define CTRL_MSG__REQ__WIFI_DEAUTH_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_deauth_sta__descriptor) \
    , 0 }


struct  CtrlMsgRespWifiDeauthSta
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t aid;
};
#define CTRL_MSG__RESP__WIFI_DEAUTH_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_deauth_sta__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqWifiStaGetApInfo
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__WIFI_STA_GET_AP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__wifi_sta_get_ap_info__descriptor) \
     }


struct  CtrlMsgRespWifiStaGetApInfo
{
  ProtobufCMessage base;
  int32_t resp;
  WifiApRecord *ap_records;
};
#define CTRL_MSG__RESP__WIFI_STA_GET_AP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__wifi_sta_get_ap_info__descriptor) \
    , 0, NULL }


struct  CtrlMsgEventWifiEventNoArgs
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t event_id;
};
#define CTRL_MSG__EVENT__WIFI_EVENT_NO_ARGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__wifi_event_no_args__descriptor) \
    , 0, 0 }


struct  CtrlMsgEventESPInit
{
  ProtobufCMessage base;
  ProtobufCBinaryData init_data;
};
#define CTRL_MSG__EVENT__ESPINIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__espinit__descriptor) \
    , {0,NULL} }


struct  CtrlMsgEventHeartbeat
{
  ProtobufCMessage base;
  int32_t hb_num;
};
#define CTRL_MSG__EVENT__HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__heartbeat__descriptor) \
    , 0 }


struct  CtrlMsgEventStationDisconnectFromAP
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__EVENT__STATION_DISCONNECT_FROM_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__station_disconnect_from_ap__descriptor) \
    , 0 }


struct  CtrlMsgEventAPStaDisconnected
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t event_id;
  ProtobufCBinaryData mac;
  uint32_t aid;
  protobuf_c_boolean is_mesh_child;
};
#define CTRL_MSG__EVENT__AP__STA_DISCONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__ap__sta_disconnected__descriptor) \
    , 0, 0, {0,NULL}, 0, 0 }


struct  CtrlMsgEventAPStaConnected
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t event_id;
  ProtobufCBinaryData mac;
  uint32_t aid;
  protobuf_c_boolean is_mesh_child;
};
#define CTRL_MSG__EVENT__AP__STA_CONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__ap__sta_connected__descriptor) \
    , 0, 0, {0,NULL}, 0, 0 }


struct  CtrlMsgEventStaScanDone
{
  ProtobufCMessage base;
  int32_t resp;
  int32_t event_id;
  WifiEventStaScanDone *scan_done;
};
#define CTRL_MSG__EVENT__STA_SCAN_DONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__sta_scan_done__descriptor) \
    , 0, 0, NULL }


typedef enum {
  CTRL_MSG__PAYLOAD__NOT_SET = 0,
  CTRL_MSG__PAYLOAD_REQ_GET_MAC_ADDRESS = 257,
  CTRL_MSG__PAYLOAD_REQ_SET_MAC_ADDRESS = 258,
  CTRL_MSG__PAYLOAD_REQ_GET_WIFI_MODE = 259,
  CTRL_MSG__PAYLOAD_REQ_SET_WIFI_MODE = 260,
  CTRL_MSG__PAYLOAD_REQ_SCAN_AP_LIST = 261,
  CTRL_MSG__PAYLOAD_REQ_GET_AP_CONFIG = 262,
  CTRL_MSG__PAYLOAD_REQ_CONNECT_AP = 263,
  CTRL_MSG__PAYLOAD_REQ_DISCONNECT_AP = 264,
  CTRL_MSG__PAYLOAD_REQ_GET_SOFTAP_CONFIG = 265,
  CTRL_MSG__PAYLOAD_REQ_SET_SOFTAP_VENDOR_SPECIFIC_IE = 266,
  CTRL_MSG__PAYLOAD_REQ_START_SOFTAP = 267,
  CTRL_MSG__PAYLOAD_REQ_SOFTAP_CONNECTED_STAS_LIST = 268,
  CTRL_MSG__PAYLOAD_REQ_STOP_SOFTAP = 269,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SET_PS = 270,
  CTRL_MSG__PAYLOAD_REQ_WIFI_GET_PS = 271,
  CTRL_MSG__PAYLOAD_REQ_OTA_BEGIN = 272,
  CTRL_MSG__PAYLOAD_REQ_OTA_WRITE = 273,
  CTRL_MSG__PAYLOAD_REQ_OTA_END = 274,
  CTRL_MSG__PAYLOAD_REQ_SET_WIFI_MAX_TX_POWER = 275,
  CTRL_MSG__PAYLOAD_REQ_GET_WIFI_CURR_TX_POWER = 276,
  CTRL_MSG__PAYLOAD_REQ_CONFIG_HEARTBEAT = 277,
  CTRL_MSG__PAYLOAD_REQ_WIFI_INIT = 278,
  CTRL_MSG__PAYLOAD_REQ_WIFI_DEINIT = 279,
  CTRL_MSG__PAYLOAD_REQ_WIFI_START = 280,
  CTRL_MSG__PAYLOAD_REQ_WIFI_STOP = 281,
  CTRL_MSG__PAYLOAD_REQ_WIFI_CONNECT = 282,
  CTRL_MSG__PAYLOAD_REQ_WIFI_DISCONNECT = 283,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SET_CONFIG = 284,
  CTRL_MSG__PAYLOAD_REQ_WIFI_GET_CONFIG = 285,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SCAN_START = 286,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SCAN_STOP = 287,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SCAN_GET_AP_NUM = 288,
  CTRL_MSG__PAYLOAD_REQ_WIFI_SCAN_GET_AP_RECORDS = 289,
  CTRL_MSG__PAYLOAD_REQ_WIFI_CLEAR_AP_LIST = 290,
  CTRL_MSG__PAYLOAD_REQ_WIFI_RESTORE = 291,
  CTRL_MSG__PAYLOAD_REQ_WIFI_CLEAR_FAST_CONNECT = 292,
  CTRL_MSG__PAYLOAD_REQ_WIFI_DEAUTH_STA = 293,
  CTRL_MSG__PAYLOAD_REQ_WIFI_STA_GET_AP_INFO = 294,
  CTRL_MSG__PAYLOAD_RESP_GET_MAC_ADDRESS = 513,
  CTRL_MSG__PAYLOAD_RESP_SET_MAC_ADDRESS = 514,
  CTRL_MSG__PAYLOAD_RESP_GET_WIFI_MODE = 515,
  CTRL_MSG__PAYLOAD_RESP_SET_WIFI_MODE = 516,
  CTRL_MSG__PAYLOAD_RESP_SCAN_AP_LIST = 517,
  CTRL_MSG__PAYLOAD_RESP_GET_AP_CONFIG = 518,
  CTRL_MSG__PAYLOAD_RESP_CONNECT_AP = 519,
  CTRL_MSG__PAYLOAD_RESP_DISCONNECT_AP = 520,
  CTRL_MSG__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 521,
  CTRL_MSG__PAYLOAD_RESP_SET_SOFTAP_VENDOR_SPECIFIC_IE = 522,
  CTRL_MSG__PAYLOAD_RESP_START_SOFTAP = 523,
  CTRL_MSG__PAYLOAD_RESP_SOFTAP_CONNECTED_STAS_LIST = 524,
  CTRL_MSG__PAYLOAD_RESP_STOP_SOFTAP = 525,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SET_PS = 526,
  CTRL_MSG__PAYLOAD_RESP_WIFI_GET_PS = 527,
  CTRL_MSG__PAYLOAD_RESP_OTA_BEGIN = 528,
  CTRL_MSG__PAYLOAD_RESP_OTA_WRITE = 529,
  CTRL_MSG__PAYLOAD_RESP_OTA_END = 530,
  CTRL_MSG__PAYLOAD_RESP_SET_WIFI_MAX_TX_POWER = 531,
  CTRL_MSG__PAYLOAD_RESP_GET_WIFI_CURR_TX_POWER = 532,
  CTRL_MSG__PAYLOAD_RESP_CONFIG_HEARTBEAT = 533,
  CTRL_MSG__PAYLOAD_RESP_WIFI_INIT = 534,
  CTRL_MSG__PAYLOAD_RESP_WIFI_DEINIT = 535,
  CTRL_MSG__PAYLOAD_RESP_WIFI_START = 536,
  CTRL_MSG__PAYLOAD_RESP_WIFI_STOP = 537,
  CTRL_MSG__PAYLOAD_RESP_WIFI_CONNECT = 538,
  CTRL_MSG__PAYLOAD_RESP_WIFI_DISCONNECT = 539,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SET_CONFIG = 540,
  CTRL_MSG__PAYLOAD_RESP_WIFI_GET_CONFIG = 541,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SCAN_START = 542,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SCAN_STOP = 543,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SCAN_GET_AP_NUM = 544,
  CTRL_MSG__PAYLOAD_RESP_WIFI_SCAN_GET_AP_RECORDS = 545,
  CTRL_MSG__PAYLOAD_RESP_WIFI_CLEAR_AP_LIST = 546,
  CTRL_MSG__PAYLOAD_RESP_WIFI_RESTORE = 547,
  CTRL_MSG__PAYLOAD_RESP_WIFI_CLEAR_FAST_CONNECT = 548,
  CTRL_MSG__PAYLOAD_RESP_WIFI_DEAUTH_STA = 549,
  CTRL_MSG__PAYLOAD_RESP_WIFI_STA_GET_AP_INFO = 550,
  CTRL_MSG__PAYLOAD_EVENT_ESP_INIT = 769,
  CTRL_MSG__PAYLOAD_EVENT_HEARTBEAT = 770,
  CTRL_MSG__PAYLOAD_EVENT_STATION_DISCONNECT_FROM__AP = 771,
  CTRL_MSG__PAYLOAD_EVENT_AP_STA_CONNECTED = 772,
  CTRL_MSG__PAYLOAD_EVENT_AP_STA_DISCONNECTED = 773,
  CTRL_MSG__PAYLOAD_EVENT_WIFI_EVENT_NO_ARGS = 774,
  CTRL_MSG__PAYLOAD_EVENT_STA_SCAN_DONE = 775
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG__PAYLOAD__CASE)
} CtrlMsg__PayloadCase;

struct  CtrlMsg
{
  ProtobufCMessage base;
  /*
   * msg_type could be req, resp or Event 
   */
  CtrlMsgType msg_type;
  /*
   * msg id 
   */
  CtrlMsgId msg_id;
  CtrlMsg__PayloadCase payload_case;
  union {
    /*
     ** Requests *
     */
    CtrlMsgReqGetMacAddress *req_get_mac_address;
    CtrlMsgReqSetMacAddress *req_set_mac_address;
    CtrlMsgReqGetMode *req_get_wifi_mode;
    CtrlMsgReqSetMode *req_set_wifi_mode;
    CtrlMsgReqScanResult *req_scan_ap_list;
    CtrlMsgReqGetAPConfig *req_get_ap_config;
    CtrlMsgReqConnectAP *req_connect_ap;
    CtrlMsgReqGetStatus *req_disconnect_ap;
    CtrlMsgReqGetSoftAPConfig *req_get_softap_config;
    CtrlMsgReqSetSoftAPVendorSpecificIE *req_set_softap_vendor_specific_ie;
    CtrlMsgReqStartSoftAP *req_start_softap;
    CtrlMsgReqSoftAPConnectedSTA *req_softap_connected_stas_list;
    CtrlMsgReqGetStatus *req_stop_softap;
    CtrlMsgReqSetMode *req_wifi_set_ps;
    CtrlMsgReqGetMode *req_wifi_get_ps;
    CtrlMsgReqOTABegin *req_ota_begin;
    CtrlMsgReqOTAWrite *req_ota_write;
    CtrlMsgReqOTAEnd *req_ota_end;
    CtrlMsgReqWifiSetMaxTxPower *req_set_wifi_max_tx_power;
    CtrlMsgReqWifiGetMaxTxPower *req_get_wifi_curr_tx_power;
    CtrlMsgReqConfigHeartbeat *req_config_heartbeat;
    CtrlMsgReqWifiInit *req_wifi_init;
    CtrlMsgReqWifiDeinit *req_wifi_deinit;
    CtrlMsgReqWifiStart *req_wifi_start;
    CtrlMsgReqWifiStop *req_wifi_stop;
    CtrlMsgReqWifiConnect *req_wifi_connect;
    CtrlMsgReqWifiDisconnect *req_wifi_disconnect;
    CtrlMsgReqWifiSetConfig *req_wifi_set_config;
    CtrlMsgReqWifiGetConfig *req_wifi_get_config;
    CtrlMsgReqWifiScanStart *req_wifi_scan_start;
    CtrlMsgReqWifiScanStop *req_wifi_scan_stop;
    CtrlMsgReqWifiScanGetApNum *req_wifi_scan_get_ap_num;
    CtrlMsgReqWifiScanGetApRecords *req_wifi_scan_get_ap_records;
    CtrlMsgReqWifiClearApList *req_wifi_clear_ap_list;
    CtrlMsgReqWifiRestore *req_wifi_restore;
    CtrlMsgReqWifiClearFastConnect *req_wifi_clear_fast_connect;
    CtrlMsgReqWifiDeauthSta *req_wifi_deauth_sta;
    CtrlMsgReqWifiStaGetApInfo *req_wifi_sta_get_ap_info;
    /*
     ** Responses *
     */
    CtrlMsgRespGetMacAddress *resp_get_mac_address;
    CtrlMsgRespSetMacAddress *resp_set_mac_address;
    CtrlMsgRespGetMode *resp_get_wifi_mode;
    CtrlMsgRespSetMode *resp_set_wifi_mode;
    CtrlMsgRespScanResult *resp_scan_ap_list;
    CtrlMsgRespGetAPConfig *resp_get_ap_config;
    CtrlMsgRespConnectAP *resp_connect_ap;
    CtrlMsgRespGetStatus *resp_disconnect_ap;
    CtrlMsgRespGetSoftAPConfig *resp_get_softap_config;
    CtrlMsgRespSetSoftAPVendorSpecificIE *resp_set_softap_vendor_specific_ie;
    CtrlMsgRespStartSoftAP *resp_start_softap;
    CtrlMsgRespSoftAPConnectedSTA *resp_softap_connected_stas_list;
    CtrlMsgRespGetStatus *resp_stop_softap;
    CtrlMsgRespSetMode *resp_wifi_set_ps;
    CtrlMsgRespGetMode *resp_wifi_get_ps;
    CtrlMsgRespOTABegin *resp_ota_begin;
    CtrlMsgRespOTAWrite *resp_ota_write;
    CtrlMsgRespOTAEnd *resp_ota_end;
    CtrlMsgRespWifiSetMaxTxPower *resp_set_wifi_max_tx_power;
    CtrlMsgRespWifiGetMaxTxPower *resp_get_wifi_curr_tx_power;
    CtrlMsgRespConfigHeartbeat *resp_config_heartbeat;
    CtrlMsgRespWifiInit *resp_wifi_init;
    CtrlMsgRespWifiDeinit *resp_wifi_deinit;
    CtrlMsgRespWifiStart *resp_wifi_start;
    CtrlMsgRespWifiStop *resp_wifi_stop;
    CtrlMsgRespWifiConnect *resp_wifi_connect;
    CtrlMsgRespWifiDisconnect *resp_wifi_disconnect;
    CtrlMsgRespWifiSetConfig *resp_wifi_set_config;
    CtrlMsgRespWifiGetConfig *resp_wifi_get_config;
    CtrlMsgRespWifiScanStart *resp_wifi_scan_start;
    CtrlMsgRespWifiScanStop *resp_wifi_scan_stop;
    CtrlMsgRespWifiScanGetApNum *resp_wifi_scan_get_ap_num;
    CtrlMsgRespWifiScanGetApRecords *resp_wifi_scan_get_ap_records;
    CtrlMsgRespWifiClearApList *resp_wifi_clear_ap_list;
    CtrlMsgRespWifiRestore *resp_wifi_restore;
    CtrlMsgRespWifiClearFastConnect *resp_wifi_clear_fast_connect;
    CtrlMsgRespWifiDeauthSta *resp_wifi_deauth_sta;
    CtrlMsgRespWifiStaGetApInfo *resp_wifi_sta_get_ap_info;
    /*
     ** Notifications *
     */
    CtrlMsgEventESPInit *event_esp_init;
    CtrlMsgEventHeartbeat *event_heartbeat;
    CtrlMsgEventStationDisconnectFromAP *event_station_disconnect_from_ap;
    CtrlMsgEventAPStaConnected *event_ap_sta_connected;
    CtrlMsgEventAPStaDisconnected *event_ap_sta_disconnected;
    CtrlMsgEventWifiEventNoArgs *event_wifi_event_no_args;
    CtrlMsgEventStaScanDone *event_sta_scan_done;
  };
};
#define CTRL_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__descriptor) \
    , CTRL_MSG_TYPE__MsgType_Invalid, CTRL_MSG_ID__MsgId_Invalid, CTRL_MSG__PAYLOAD__NOT_SET, {0} }


/* WifiInitConfig methods */
void   wifi_init_config__init
                     (WifiInitConfig         *message);
size_t wifi_init_config__get_packed_size
                     (const WifiInitConfig   *message);
size_t wifi_init_config__pack
                     (const WifiInitConfig   *message,
                      uint8_t             *out);
size_t wifi_init_config__pack_to_buffer
                     (const WifiInitConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiInitConfig *
       wifi_init_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_init_config__free_unpacked
                     (WifiInitConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiCountry methods */
void   wifi_country__init
                     (WifiCountry         *message);
size_t wifi_country__get_packed_size
                     (const WifiCountry   *message);
size_t wifi_country__pack
                     (const WifiCountry   *message,
                      uint8_t             *out);
size_t wifi_country__pack_to_buffer
                     (const WifiCountry   *message,
                      ProtobufCBuffer     *buffer);
WifiCountry *
       wifi_country__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_country__free_unpacked
                     (WifiCountry *message,
                      ProtobufCAllocator *allocator);
/* WifiActiveScanTime methods */
void   wifi_active_scan_time__init
                     (WifiActiveScanTime         *message);
size_t wifi_active_scan_time__get_packed_size
                     (const WifiActiveScanTime   *message);
size_t wifi_active_scan_time__pack
                     (const WifiActiveScanTime   *message,
                      uint8_t             *out);
size_t wifi_active_scan_time__pack_to_buffer
                     (const WifiActiveScanTime   *message,
                      ProtobufCBuffer     *buffer);
WifiActiveScanTime *
       wifi_active_scan_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_active_scan_time__free_unpacked
                     (WifiActiveScanTime *message,
                      ProtobufCAllocator *allocator);
/* WifiScanTime methods */
void   wifi_scan_time__init
                     (WifiScanTime         *message);
size_t wifi_scan_time__get_packed_size
                     (const WifiScanTime   *message);
size_t wifi_scan_time__pack
                     (const WifiScanTime   *message,
                      uint8_t             *out);
size_t wifi_scan_time__pack_to_buffer
                     (const WifiScanTime   *message,
                      ProtobufCBuffer     *buffer);
WifiScanTime *
       wifi_scan_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_scan_time__free_unpacked
                     (WifiScanTime *message,
                      ProtobufCAllocator *allocator);
/* WifiScanConfig methods */
void   wifi_scan_config__init
                     (WifiScanConfig         *message);
size_t wifi_scan_config__get_packed_size
                     (const WifiScanConfig   *message);
size_t wifi_scan_config__pack
                     (const WifiScanConfig   *message,
                      uint8_t             *out);
size_t wifi_scan_config__pack_to_buffer
                     (const WifiScanConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiScanConfig *
       wifi_scan_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_scan_config__free_unpacked
                     (WifiScanConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiApRecord methods */
void   wifi_ap_record__init
                     (WifiApRecord         *message);
size_t wifi_ap_record__get_packed_size
                     (const WifiApRecord   *message);
size_t wifi_ap_record__pack
                     (const WifiApRecord   *message,
                      uint8_t             *out);
size_t wifi_ap_record__pack_to_buffer
                     (const WifiApRecord   *message,
                      ProtobufCBuffer     *buffer);
WifiApRecord *
       wifi_ap_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ap_record__free_unpacked
                     (WifiApRecord *message,
                      ProtobufCAllocator *allocator);
/* WifiScanThreshold methods */
void   wifi_scan_threshold__init
                     (WifiScanThreshold         *message);
size_t wifi_scan_threshold__get_packed_size
                     (const WifiScanThreshold   *message);
size_t wifi_scan_threshold__pack
                     (const WifiScanThreshold   *message,
                      uint8_t             *out);
size_t wifi_scan_threshold__pack_to_buffer
                     (const WifiScanThreshold   *message,
                      ProtobufCBuffer     *buffer);
WifiScanThreshold *
       wifi_scan_threshold__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_scan_threshold__free_unpacked
                     (WifiScanThreshold *message,
                      ProtobufCAllocator *allocator);
/* WifiPmfConfig methods */
void   wifi_pmf_config__init
                     (WifiPmfConfig         *message);
size_t wifi_pmf_config__get_packed_size
                     (const WifiPmfConfig   *message);
size_t wifi_pmf_config__pack
                     (const WifiPmfConfig   *message,
                      uint8_t             *out);
size_t wifi_pmf_config__pack_to_buffer
                     (const WifiPmfConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiPmfConfig *
       wifi_pmf_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_pmf_config__free_unpacked
                     (WifiPmfConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiApConfig methods */
void   wifi_ap_config__init
                     (WifiApConfig         *message);
size_t wifi_ap_config__get_packed_size
                     (const WifiApConfig   *message);
size_t wifi_ap_config__pack
                     (const WifiApConfig   *message,
                      uint8_t             *out);
size_t wifi_ap_config__pack_to_buffer
                     (const WifiApConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiApConfig *
       wifi_ap_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ap_config__free_unpacked
                     (WifiApConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiStaConfig methods */
void   wifi_sta_config__init
                     (WifiStaConfig         *message);
size_t wifi_sta_config__get_packed_size
                     (const WifiStaConfig   *message);
size_t wifi_sta_config__pack
                     (const WifiStaConfig   *message,
                      uint8_t             *out);
size_t wifi_sta_config__pack_to_buffer
                     (const WifiStaConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiStaConfig *
       wifi_sta_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_sta_config__free_unpacked
                     (WifiStaConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiConfig methods */
void   wifi_config__init
                     (WifiConfig         *message);
size_t wifi_config__get_packed_size
                     (const WifiConfig   *message);
size_t wifi_config__pack
                     (const WifiConfig   *message,
                      uint8_t             *out);
size_t wifi_config__pack_to_buffer
                     (const WifiConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiConfig *
       wifi_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_config__free_unpacked
                     (WifiConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiStaInfo methods */
void   wifi_sta_info__init
                     (WifiStaInfo         *message);
size_t wifi_sta_info__get_packed_size
                     (const WifiStaInfo   *message);
size_t wifi_sta_info__pack
                     (const WifiStaInfo   *message,
                      uint8_t             *out);
size_t wifi_sta_info__pack_to_buffer
                     (const WifiStaInfo   *message,
                      ProtobufCBuffer     *buffer);
WifiStaInfo *
       wifi_sta_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_sta_info__free_unpacked
                     (WifiStaInfo *message,
                      ProtobufCAllocator *allocator);
/* WifiStaList methods */
void   wifi_sta_list__init
                     (WifiStaList         *message);
size_t wifi_sta_list__get_packed_size
                     (const WifiStaList   *message);
size_t wifi_sta_list__pack
                     (const WifiStaList   *message,
                      uint8_t             *out);
size_t wifi_sta_list__pack_to_buffer
                     (const WifiStaList   *message,
                      ProtobufCBuffer     *buffer);
WifiStaList *
       wifi_sta_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_sta_list__free_unpacked
                     (WifiStaList *message,
                      ProtobufCAllocator *allocator);
/* VendorIeData methods */
void   vendor_ie_data__init
                     (VendorIeData         *message);
size_t vendor_ie_data__get_packed_size
                     (const VendorIeData   *message);
size_t vendor_ie_data__pack
                     (const VendorIeData   *message,
                      uint8_t             *out);
size_t vendor_ie_data__pack_to_buffer
                     (const VendorIeData   *message,
                      ProtobufCBuffer     *buffer);
VendorIeData *
       vendor_ie_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vendor_ie_data__free_unpacked
                     (VendorIeData *message,
                      ProtobufCAllocator *allocator);
/* WifiPktRxCtrl methods */
void   wifi_pkt_rx_ctrl__init
                     (WifiPktRxCtrl         *message);
size_t wifi_pkt_rx_ctrl__get_packed_size
                     (const WifiPktRxCtrl   *message);
size_t wifi_pkt_rx_ctrl__pack
                     (const WifiPktRxCtrl   *message,
                      uint8_t             *out);
size_t wifi_pkt_rx_ctrl__pack_to_buffer
                     (const WifiPktRxCtrl   *message,
                      ProtobufCBuffer     *buffer);
WifiPktRxCtrl *
       wifi_pkt_rx_ctrl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_pkt_rx_ctrl__free_unpacked
                     (WifiPktRxCtrl *message,
                      ProtobufCAllocator *allocator);
/* WifiPromiscuousPkt methods */
void   wifi_promiscuous_pkt__init
                     (WifiPromiscuousPkt         *message);
size_t wifi_promiscuous_pkt__get_packed_size
                     (const WifiPromiscuousPkt   *message);
size_t wifi_promiscuous_pkt__pack
                     (const WifiPromiscuousPkt   *message,
                      uint8_t             *out);
size_t wifi_promiscuous_pkt__pack_to_buffer
                     (const WifiPromiscuousPkt   *message,
                      ProtobufCBuffer     *buffer);
WifiPromiscuousPkt *
       wifi_promiscuous_pkt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_promiscuous_pkt__free_unpacked
                     (WifiPromiscuousPkt *message,
                      ProtobufCAllocator *allocator);
/* WifiPromiscuousFilter methods */
void   wifi_promiscuous_filter__init
                     (WifiPromiscuousFilter         *message);
size_t wifi_promiscuous_filter__get_packed_size
                     (const WifiPromiscuousFilter   *message);
size_t wifi_promiscuous_filter__pack
                     (const WifiPromiscuousFilter   *message,
                      uint8_t             *out);
size_t wifi_promiscuous_filter__pack_to_buffer
                     (const WifiPromiscuousFilter   *message,
                      ProtobufCBuffer     *buffer);
WifiPromiscuousFilter *
       wifi_promiscuous_filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_promiscuous_filter__free_unpacked
                     (WifiPromiscuousFilter *message,
                      ProtobufCAllocator *allocator);
/* WifiCsiConfig methods */
void   wifi_csi_config__init
                     (WifiCsiConfig         *message);
size_t wifi_csi_config__get_packed_size
                     (const WifiCsiConfig   *message);
size_t wifi_csi_config__pack
                     (const WifiCsiConfig   *message,
                      uint8_t             *out);
size_t wifi_csi_config__pack_to_buffer
                     (const WifiCsiConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiCsiConfig *
       wifi_csi_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_csi_config__free_unpacked
                     (WifiCsiConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiCsiInfo methods */
void   wifi_csi_info__init
                     (WifiCsiInfo         *message);
size_t wifi_csi_info__get_packed_size
                     (const WifiCsiInfo   *message);
size_t wifi_csi_info__pack
                     (const WifiCsiInfo   *message,
                      uint8_t             *out);
size_t wifi_csi_info__pack_to_buffer
                     (const WifiCsiInfo   *message,
                      ProtobufCBuffer     *buffer);
WifiCsiInfo *
       wifi_csi_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_csi_info__free_unpacked
                     (WifiCsiInfo *message,
                      ProtobufCAllocator *allocator);
/* WifiAntGpio methods */
void   wifi_ant_gpio__init
                     (WifiAntGpio         *message);
size_t wifi_ant_gpio__get_packed_size
                     (const WifiAntGpio   *message);
size_t wifi_ant_gpio__pack
                     (const WifiAntGpio   *message,
                      uint8_t             *out);
size_t wifi_ant_gpio__pack_to_buffer
                     (const WifiAntGpio   *message,
                      ProtobufCBuffer     *buffer);
WifiAntGpio *
       wifi_ant_gpio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ant_gpio__free_unpacked
                     (WifiAntGpio *message,
                      ProtobufCAllocator *allocator);
/* WifiAntGpioConfig methods */
void   wifi_ant_gpio_config__init
                     (WifiAntGpioConfig         *message);
size_t wifi_ant_gpio_config__get_packed_size
                     (const WifiAntGpioConfig   *message);
size_t wifi_ant_gpio_config__pack
                     (const WifiAntGpioConfig   *message,
                      uint8_t             *out);
size_t wifi_ant_gpio_config__pack_to_buffer
                     (const WifiAntGpioConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiAntGpioConfig *
       wifi_ant_gpio_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ant_gpio_config__free_unpacked
                     (WifiAntGpioConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiAntConfig methods */
void   wifi_ant_config__init
                     (WifiAntConfig         *message);
size_t wifi_ant_config__get_packed_size
                     (const WifiAntConfig   *message);
size_t wifi_ant_config__pack
                     (const WifiAntConfig   *message,
                      uint8_t             *out);
size_t wifi_ant_config__pack_to_buffer
                     (const WifiAntConfig   *message,
                      ProtobufCBuffer     *buffer);
WifiAntConfig *
       wifi_ant_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ant_config__free_unpacked
                     (WifiAntConfig *message,
                      ProtobufCAllocator *allocator);
/* WifiActionTxReq methods */
void   wifi_action_tx_req__init
                     (WifiActionTxReq         *message);
size_t wifi_action_tx_req__get_packed_size
                     (const WifiActionTxReq   *message);
size_t wifi_action_tx_req__pack
                     (const WifiActionTxReq   *message,
                      uint8_t             *out);
size_t wifi_action_tx_req__pack_to_buffer
                     (const WifiActionTxReq   *message,
                      ProtobufCBuffer     *buffer);
WifiActionTxReq *
       wifi_action_tx_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_action_tx_req__free_unpacked
                     (WifiActionTxReq *message,
                      ProtobufCAllocator *allocator);
/* WifiFtmInitiatorCfg methods */
void   wifi_ftm_initiator_cfg__init
                     (WifiFtmInitiatorCfg         *message);
size_t wifi_ftm_initiator_cfg__get_packed_size
                     (const WifiFtmInitiatorCfg   *message);
size_t wifi_ftm_initiator_cfg__pack
                     (const WifiFtmInitiatorCfg   *message,
                      uint8_t             *out);
size_t wifi_ftm_initiator_cfg__pack_to_buffer
                     (const WifiFtmInitiatorCfg   *message,
                      ProtobufCBuffer     *buffer);
WifiFtmInitiatorCfg *
       wifi_ftm_initiator_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ftm_initiator_cfg__free_unpacked
                     (WifiFtmInitiatorCfg *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaScanDone methods */
void   wifi_event_sta_scan_done__init
                     (WifiEventStaScanDone         *message);
size_t wifi_event_sta_scan_done__get_packed_size
                     (const WifiEventStaScanDone   *message);
size_t wifi_event_sta_scan_done__pack
                     (const WifiEventStaScanDone   *message,
                      uint8_t             *out);
size_t wifi_event_sta_scan_done__pack_to_buffer
                     (const WifiEventStaScanDone   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaScanDone *
       wifi_event_sta_scan_done__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_scan_done__free_unpacked
                     (WifiEventStaScanDone *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaConnected methods */
void   wifi_event_sta_connected__init
                     (WifiEventStaConnected         *message);
size_t wifi_event_sta_connected__get_packed_size
                     (const WifiEventStaConnected   *message);
size_t wifi_event_sta_connected__pack
                     (const WifiEventStaConnected   *message,
                      uint8_t             *out);
size_t wifi_event_sta_connected__pack_to_buffer
                     (const WifiEventStaConnected   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaConnected *
       wifi_event_sta_connected__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_connected__free_unpacked
                     (WifiEventStaConnected *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaDisconnected methods */
void   wifi_event_sta_disconnected__init
                     (WifiEventStaDisconnected         *message);
size_t wifi_event_sta_disconnected__get_packed_size
                     (const WifiEventStaDisconnected   *message);
size_t wifi_event_sta_disconnected__pack
                     (const WifiEventStaDisconnected   *message,
                      uint8_t             *out);
size_t wifi_event_sta_disconnected__pack_to_buffer
                     (const WifiEventStaDisconnected   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaDisconnected *
       wifi_event_sta_disconnected__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_disconnected__free_unpacked
                     (WifiEventStaDisconnected *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaAuthmodeChange methods */
void   wifi_event_sta_authmode_change__init
                     (WifiEventStaAuthmodeChange         *message);
size_t wifi_event_sta_authmode_change__get_packed_size
                     (const WifiEventStaAuthmodeChange   *message);
size_t wifi_event_sta_authmode_change__pack
                     (const WifiEventStaAuthmodeChange   *message,
                      uint8_t             *out);
size_t wifi_event_sta_authmode_change__pack_to_buffer
                     (const WifiEventStaAuthmodeChange   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaAuthmodeChange *
       wifi_event_sta_authmode_change__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_authmode_change__free_unpacked
                     (WifiEventStaAuthmodeChange *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaWpsErPin methods */
void   wifi_event_sta_wps_er_pin__init
                     (WifiEventStaWpsErPin         *message);
size_t wifi_event_sta_wps_er_pin__get_packed_size
                     (const WifiEventStaWpsErPin   *message);
size_t wifi_event_sta_wps_er_pin__pack
                     (const WifiEventStaWpsErPin   *message,
                      uint8_t             *out);
size_t wifi_event_sta_wps_er_pin__pack_to_buffer
                     (const WifiEventStaWpsErPin   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaWpsErPin *
       wifi_event_sta_wps_er_pin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_wps_er_pin__free_unpacked
                     (WifiEventStaWpsErPin *message,
                      ProtobufCAllocator *allocator);
/* ApCred methods */
void   ap_cred__init
                     (ApCred         *message);
size_t ap_cred__get_packed_size
                     (const ApCred   *message);
size_t ap_cred__pack
                     (const ApCred   *message,
                      uint8_t             *out);
size_t ap_cred__pack_to_buffer
                     (const ApCred   *message,
                      ProtobufCBuffer     *buffer);
ApCred *
       ap_cred__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ap_cred__free_unpacked
                     (ApCred *message,
                      ProtobufCAllocator *allocator);
/* WifiEventStaWpsErSuccess methods */
void   wifi_event_sta_wps_er_success__init
                     (WifiEventStaWpsErSuccess         *message);
size_t wifi_event_sta_wps_er_success__get_packed_size
                     (const WifiEventStaWpsErSuccess   *message);
size_t wifi_event_sta_wps_er_success__pack
                     (const WifiEventStaWpsErSuccess   *message,
                      uint8_t             *out);
size_t wifi_event_sta_wps_er_success__pack_to_buffer
                     (const WifiEventStaWpsErSuccess   *message,
                      ProtobufCBuffer     *buffer);
WifiEventStaWpsErSuccess *
       wifi_event_sta_wps_er_success__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_sta_wps_er_success__free_unpacked
                     (WifiEventStaWpsErSuccess *message,
                      ProtobufCAllocator *allocator);
/* WifiEventApProbeReqRx methods */
void   wifi_event_ap_probe_req_rx__init
                     (WifiEventApProbeReqRx         *message);
size_t wifi_event_ap_probe_req_rx__get_packed_size
                     (const WifiEventApProbeReqRx   *message);
size_t wifi_event_ap_probe_req_rx__pack
                     (const WifiEventApProbeReqRx   *message,
                      uint8_t             *out);
size_t wifi_event_ap_probe_req_rx__pack_to_buffer
                     (const WifiEventApProbeReqRx   *message,
                      ProtobufCBuffer     *buffer);
WifiEventApProbeReqRx *
       wifi_event_ap_probe_req_rx__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_ap_probe_req_rx__free_unpacked
                     (WifiEventApProbeReqRx *message,
                      ProtobufCAllocator *allocator);
/* WifiEventBssRssiLow methods */
void   wifi_event_bss_rssi_low__init
                     (WifiEventBssRssiLow         *message);
size_t wifi_event_bss_rssi_low__get_packed_size
                     (const WifiEventBssRssiLow   *message);
size_t wifi_event_bss_rssi_low__pack
                     (const WifiEventBssRssiLow   *message,
                      uint8_t             *out);
size_t wifi_event_bss_rssi_low__pack_to_buffer
                     (const WifiEventBssRssiLow   *message,
                      ProtobufCBuffer     *buffer);
WifiEventBssRssiLow *
       wifi_event_bss_rssi_low__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_bss_rssi_low__free_unpacked
                     (WifiEventBssRssiLow *message,
                      ProtobufCAllocator *allocator);
/* WifiFtmReportEntry methods */
void   wifi_ftm_report_entry__init
                     (WifiFtmReportEntry         *message);
size_t wifi_ftm_report_entry__get_packed_size
                     (const WifiFtmReportEntry   *message);
size_t wifi_ftm_report_entry__pack
                     (const WifiFtmReportEntry   *message,
                      uint8_t             *out);
size_t wifi_ftm_report_entry__pack_to_buffer
                     (const WifiFtmReportEntry   *message,
                      ProtobufCBuffer     *buffer);
WifiFtmReportEntry *
       wifi_ftm_report_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_ftm_report_entry__free_unpacked
                     (WifiFtmReportEntry *message,
                      ProtobufCAllocator *allocator);
/* WifiEventFtmReport methods */
void   wifi_event_ftm_report__init
                     (WifiEventFtmReport         *message);
size_t wifi_event_ftm_report__get_packed_size
                     (const WifiEventFtmReport   *message);
size_t wifi_event_ftm_report__pack
                     (const WifiEventFtmReport   *message,
                      uint8_t             *out);
size_t wifi_event_ftm_report__pack_to_buffer
                     (const WifiEventFtmReport   *message,
                      ProtobufCBuffer     *buffer);
WifiEventFtmReport *
       wifi_event_ftm_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_ftm_report__free_unpacked
                     (WifiEventFtmReport *message,
                      ProtobufCAllocator *allocator);
/* WifiEventActionTxStatus methods */
void   wifi_event_action_tx_status__init
                     (WifiEventActionTxStatus         *message);
size_t wifi_event_action_tx_status__get_packed_size
                     (const WifiEventActionTxStatus   *message);
size_t wifi_event_action_tx_status__pack
                     (const WifiEventActionTxStatus   *message,
                      uint8_t             *out);
size_t wifi_event_action_tx_status__pack_to_buffer
                     (const WifiEventActionTxStatus   *message,
                      ProtobufCBuffer     *buffer);
WifiEventActionTxStatus *
       wifi_event_action_tx_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_action_tx_status__free_unpacked
                     (WifiEventActionTxStatus *message,
                      ProtobufCAllocator *allocator);
/* WifiEventRocDone methods */
void   wifi_event_roc_done__init
                     (WifiEventRocDone         *message);
size_t wifi_event_roc_done__get_packed_size
                     (const WifiEventRocDone   *message);
size_t wifi_event_roc_done__pack
                     (const WifiEventRocDone   *message,
                      uint8_t             *out);
size_t wifi_event_roc_done__pack_to_buffer
                     (const WifiEventRocDone   *message,
                      ProtobufCBuffer     *buffer);
WifiEventRocDone *
       wifi_event_roc_done__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_roc_done__free_unpacked
                     (WifiEventRocDone *message,
                      ProtobufCAllocator *allocator);
/* WifiEventApWpsRgPin methods */
void   wifi_event_ap_wps_rg_pin__init
                     (WifiEventApWpsRgPin         *message);
size_t wifi_event_ap_wps_rg_pin__get_packed_size
                     (const WifiEventApWpsRgPin   *message);
size_t wifi_event_ap_wps_rg_pin__pack
                     (const WifiEventApWpsRgPin   *message,
                      uint8_t             *out);
size_t wifi_event_ap_wps_rg_pin__pack_to_buffer
                     (const WifiEventApWpsRgPin   *message,
                      ProtobufCBuffer     *buffer);
WifiEventApWpsRgPin *
       wifi_event_ap_wps_rg_pin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_ap_wps_rg_pin__free_unpacked
                     (WifiEventApWpsRgPin *message,
                      ProtobufCAllocator *allocator);
/* WifiEventApWpsRgFailReason methods */
void   wifi_event_ap_wps_rg_fail_reason__init
                     (WifiEventApWpsRgFailReason         *message);
size_t wifi_event_ap_wps_rg_fail_reason__get_packed_size
                     (const WifiEventApWpsRgFailReason   *message);
size_t wifi_event_ap_wps_rg_fail_reason__pack
                     (const WifiEventApWpsRgFailReason   *message,
                      uint8_t             *out);
size_t wifi_event_ap_wps_rg_fail_reason__pack_to_buffer
                     (const WifiEventApWpsRgFailReason   *message,
                      ProtobufCBuffer     *buffer);
WifiEventApWpsRgFailReason *
       wifi_event_ap_wps_rg_fail_reason__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_ap_wps_rg_fail_reason__free_unpacked
                     (WifiEventApWpsRgFailReason *message,
                      ProtobufCAllocator *allocator);
/* WifiEventApWpsRgSuccess methods */
void   wifi_event_ap_wps_rg_success__init
                     (WifiEventApWpsRgSuccess         *message);
size_t wifi_event_ap_wps_rg_success__get_packed_size
                     (const WifiEventApWpsRgSuccess   *message);
size_t wifi_event_ap_wps_rg_success__pack
                     (const WifiEventApWpsRgSuccess   *message,
                      uint8_t             *out);
size_t wifi_event_ap_wps_rg_success__pack_to_buffer
                     (const WifiEventApWpsRgSuccess   *message,
                      ProtobufCBuffer     *buffer);
WifiEventApWpsRgSuccess *
       wifi_event_ap_wps_rg_success__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_event_ap_wps_rg_success__free_unpacked
                     (WifiEventApWpsRgSuccess *message,
                      ProtobufCAllocator *allocator);
/* ScanResult methods */
void   scan_result__init
                     (ScanResult         *message);
size_t scan_result__get_packed_size
                     (const ScanResult   *message);
size_t scan_result__pack
                     (const ScanResult   *message,
                      uint8_t             *out);
size_t scan_result__pack_to_buffer
                     (const ScanResult   *message,
                      ProtobufCBuffer     *buffer);
ScanResult *
       scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scan_result__free_unpacked
                     (ScanResult *message,
                      ProtobufCAllocator *allocator);
/* ConnectedSTAList methods */
void   connected_stalist__init
                     (ConnectedSTAList         *message);
size_t connected_stalist__get_packed_size
                     (const ConnectedSTAList   *message);
size_t connected_stalist__pack
                     (const ConnectedSTAList   *message,
                      uint8_t             *out);
size_t connected_stalist__pack_to_buffer
                     (const ConnectedSTAList   *message,
                      ProtobufCBuffer     *buffer);
ConnectedSTAList *
       connected_stalist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connected_stalist__free_unpacked
                     (ConnectedSTAList *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetMacAddress methods */
void   ctrl_msg__req__get_mac_address__init
                     (CtrlMsgReqGetMacAddress         *message);
size_t ctrl_msg__req__get_mac_address__get_packed_size
                     (const CtrlMsgReqGetMacAddress   *message);
size_t ctrl_msg__req__get_mac_address__pack
                     (const CtrlMsgReqGetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_mac_address__pack_to_buffer
                     (const CtrlMsgReqGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetMacAddress *
       ctrl_msg__req__get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_mac_address__free_unpacked
                     (CtrlMsgReqGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetMacAddress methods */
void   ctrl_msg__resp__get_mac_address__init
                     (CtrlMsgRespGetMacAddress         *message);
size_t ctrl_msg__resp__get_mac_address__get_packed_size
                     (const CtrlMsgRespGetMacAddress   *message);
size_t ctrl_msg__resp__get_mac_address__pack
                     (const CtrlMsgRespGetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_mac_address__pack_to_buffer
                     (const CtrlMsgRespGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetMacAddress *
       ctrl_msg__resp__get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_mac_address__free_unpacked
                     (CtrlMsgRespGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetMode methods */
void   ctrl_msg__req__get_mode__init
                     (CtrlMsgReqGetMode         *message);
size_t ctrl_msg__req__get_mode__get_packed_size
                     (const CtrlMsgReqGetMode   *message);
size_t ctrl_msg__req__get_mode__pack
                     (const CtrlMsgReqGetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_mode__pack_to_buffer
                     (const CtrlMsgReqGetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetMode *
       ctrl_msg__req__get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_mode__free_unpacked
                     (CtrlMsgReqGetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetMode methods */
void   ctrl_msg__resp__get_mode__init
                     (CtrlMsgRespGetMode         *message);
size_t ctrl_msg__resp__get_mode__get_packed_size
                     (const CtrlMsgRespGetMode   *message);
size_t ctrl_msg__resp__get_mode__pack
                     (const CtrlMsgRespGetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_mode__pack_to_buffer
                     (const CtrlMsgRespGetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetMode *
       ctrl_msg__resp__get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_mode__free_unpacked
                     (CtrlMsgRespGetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetMode methods */
void   ctrl_msg__req__set_mode__init
                     (CtrlMsgReqSetMode         *message);
size_t ctrl_msg__req__set_mode__get_packed_size
                     (const CtrlMsgReqSetMode   *message);
size_t ctrl_msg__req__set_mode__pack
                     (const CtrlMsgReqSetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_mode__pack_to_buffer
                     (const CtrlMsgReqSetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetMode *
       ctrl_msg__req__set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_mode__free_unpacked
                     (CtrlMsgReqSetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetMode methods */
void   ctrl_msg__resp__set_mode__init
                     (CtrlMsgRespSetMode         *message);
size_t ctrl_msg__resp__set_mode__get_packed_size
                     (const CtrlMsgRespSetMode   *message);
size_t ctrl_msg__resp__set_mode__pack
                     (const CtrlMsgRespSetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_mode__pack_to_buffer
                     (const CtrlMsgRespSetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetMode *
       ctrl_msg__resp__set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_mode__free_unpacked
                     (CtrlMsgRespSetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetStatus methods */
void   ctrl_msg__req__get_status__init
                     (CtrlMsgReqGetStatus         *message);
size_t ctrl_msg__req__get_status__get_packed_size
                     (const CtrlMsgReqGetStatus   *message);
size_t ctrl_msg__req__get_status__pack
                     (const CtrlMsgReqGetStatus   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_status__pack_to_buffer
                     (const CtrlMsgReqGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetStatus *
       ctrl_msg__req__get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_status__free_unpacked
                     (CtrlMsgReqGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetStatus methods */
void   ctrl_msg__resp__get_status__init
                     (CtrlMsgRespGetStatus         *message);
size_t ctrl_msg__resp__get_status__get_packed_size
                     (const CtrlMsgRespGetStatus   *message);
size_t ctrl_msg__resp__get_status__pack
                     (const CtrlMsgRespGetStatus   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_status__pack_to_buffer
                     (const CtrlMsgRespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetStatus *
       ctrl_msg__resp__get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_status__free_unpacked
                     (CtrlMsgRespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetMacAddress methods */
void   ctrl_msg__req__set_mac_address__init
                     (CtrlMsgReqSetMacAddress         *message);
size_t ctrl_msg__req__set_mac_address__get_packed_size
                     (const CtrlMsgReqSetMacAddress   *message);
size_t ctrl_msg__req__set_mac_address__pack
                     (const CtrlMsgReqSetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_mac_address__pack_to_buffer
                     (const CtrlMsgReqSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetMacAddress *
       ctrl_msg__req__set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_mac_address__free_unpacked
                     (CtrlMsgReqSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetMacAddress methods */
void   ctrl_msg__resp__set_mac_address__init
                     (CtrlMsgRespSetMacAddress         *message);
size_t ctrl_msg__resp__set_mac_address__get_packed_size
                     (const CtrlMsgRespSetMacAddress   *message);
size_t ctrl_msg__resp__set_mac_address__pack
                     (const CtrlMsgRespSetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_mac_address__pack_to_buffer
                     (const CtrlMsgRespSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetMacAddress *
       ctrl_msg__resp__set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_mac_address__free_unpacked
                     (CtrlMsgRespSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetAPConfig methods */
void   ctrl_msg__req__get_apconfig__init
                     (CtrlMsgReqGetAPConfig         *message);
size_t ctrl_msg__req__get_apconfig__get_packed_size
                     (const CtrlMsgReqGetAPConfig   *message);
size_t ctrl_msg__req__get_apconfig__pack
                     (const CtrlMsgReqGetAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_apconfig__pack_to_buffer
                     (const CtrlMsgReqGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetAPConfig *
       ctrl_msg__req__get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_apconfig__free_unpacked
                     (CtrlMsgReqGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetAPConfig methods */
void   ctrl_msg__resp__get_apconfig__init
                     (CtrlMsgRespGetAPConfig         *message);
size_t ctrl_msg__resp__get_apconfig__get_packed_size
                     (const CtrlMsgRespGetAPConfig   *message);
size_t ctrl_msg__resp__get_apconfig__pack
                     (const CtrlMsgRespGetAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_apconfig__pack_to_buffer
                     (const CtrlMsgRespGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetAPConfig *
       ctrl_msg__resp__get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_apconfig__free_unpacked
                     (CtrlMsgRespGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqConnectAP methods */
void   ctrl_msg__req__connect_ap__init
                     (CtrlMsgReqConnectAP         *message);
size_t ctrl_msg__req__connect_ap__get_packed_size
                     (const CtrlMsgReqConnectAP   *message);
size_t ctrl_msg__req__connect_ap__pack
                     (const CtrlMsgReqConnectAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__connect_ap__pack_to_buffer
                     (const CtrlMsgReqConnectAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqConnectAP *
       ctrl_msg__req__connect_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__connect_ap__free_unpacked
                     (CtrlMsgReqConnectAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespConnectAP methods */
void   ctrl_msg__resp__connect_ap__init
                     (CtrlMsgRespConnectAP         *message);
size_t ctrl_msg__resp__connect_ap__get_packed_size
                     (const CtrlMsgRespConnectAP   *message);
size_t ctrl_msg__resp__connect_ap__pack
                     (const CtrlMsgRespConnectAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__connect_ap__pack_to_buffer
                     (const CtrlMsgRespConnectAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespConnectAP *
       ctrl_msg__resp__connect_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__connect_ap__free_unpacked
                     (CtrlMsgRespConnectAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetSoftAPConfig methods */
void   ctrl_msg__req__get_soft_apconfig__init
                     (CtrlMsgReqGetSoftAPConfig         *message);
size_t ctrl_msg__req__get_soft_apconfig__get_packed_size
                     (const CtrlMsgReqGetSoftAPConfig   *message);
size_t ctrl_msg__req__get_soft_apconfig__pack
                     (const CtrlMsgReqGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_soft_apconfig__pack_to_buffer
                     (const CtrlMsgReqGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetSoftAPConfig *
       ctrl_msg__req__get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_soft_apconfig__free_unpacked
                     (CtrlMsgReqGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetSoftAPConfig methods */
void   ctrl_msg__resp__get_soft_apconfig__init
                     (CtrlMsgRespGetSoftAPConfig         *message);
size_t ctrl_msg__resp__get_soft_apconfig__get_packed_size
                     (const CtrlMsgRespGetSoftAPConfig   *message);
size_t ctrl_msg__resp__get_soft_apconfig__pack
                     (const CtrlMsgRespGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_soft_apconfig__pack_to_buffer
                     (const CtrlMsgRespGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetSoftAPConfig *
       ctrl_msg__resp__get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_soft_apconfig__free_unpacked
                     (CtrlMsgRespGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqStartSoftAP methods */
void   ctrl_msg__req__start_soft_ap__init
                     (CtrlMsgReqStartSoftAP         *message);
size_t ctrl_msg__req__start_soft_ap__get_packed_size
                     (const CtrlMsgReqStartSoftAP   *message);
size_t ctrl_msg__req__start_soft_ap__pack
                     (const CtrlMsgReqStartSoftAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__start_soft_ap__pack_to_buffer
                     (const CtrlMsgReqStartSoftAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqStartSoftAP *
       ctrl_msg__req__start_soft_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__start_soft_ap__free_unpacked
                     (CtrlMsgReqStartSoftAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespStartSoftAP methods */
void   ctrl_msg__resp__start_soft_ap__init
                     (CtrlMsgRespStartSoftAP         *message);
size_t ctrl_msg__resp__start_soft_ap__get_packed_size
                     (const CtrlMsgRespStartSoftAP   *message);
size_t ctrl_msg__resp__start_soft_ap__pack
                     (const CtrlMsgRespStartSoftAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__start_soft_ap__pack_to_buffer
                     (const CtrlMsgRespStartSoftAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespStartSoftAP *
       ctrl_msg__resp__start_soft_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__start_soft_ap__free_unpacked
                     (CtrlMsgRespStartSoftAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqScanResult methods */
void   ctrl_msg__req__scan_result__init
                     (CtrlMsgReqScanResult         *message);
size_t ctrl_msg__req__scan_result__get_packed_size
                     (const CtrlMsgReqScanResult   *message);
size_t ctrl_msg__req__scan_result__pack
                     (const CtrlMsgReqScanResult   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__scan_result__pack_to_buffer
                     (const CtrlMsgReqScanResult   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqScanResult *
       ctrl_msg__req__scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__scan_result__free_unpacked
                     (CtrlMsgReqScanResult *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespScanResult methods */
void   ctrl_msg__resp__scan_result__init
                     (CtrlMsgRespScanResult         *message);
size_t ctrl_msg__resp__scan_result__get_packed_size
                     (const CtrlMsgRespScanResult   *message);
size_t ctrl_msg__resp__scan_result__pack
                     (const CtrlMsgRespScanResult   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__scan_result__pack_to_buffer
                     (const CtrlMsgRespScanResult   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespScanResult *
       ctrl_msg__resp__scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__scan_result__free_unpacked
                     (CtrlMsgRespScanResult *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSoftAPConnectedSTA methods */
void   ctrl_msg__req__soft_apconnected_sta__init
                     (CtrlMsgReqSoftAPConnectedSTA         *message);
size_t ctrl_msg__req__soft_apconnected_sta__get_packed_size
                     (const CtrlMsgReqSoftAPConnectedSTA   *message);
size_t ctrl_msg__req__soft_apconnected_sta__pack
                     (const CtrlMsgReqSoftAPConnectedSTA   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__soft_apconnected_sta__pack_to_buffer
                     (const CtrlMsgReqSoftAPConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSoftAPConnectedSTA *
       ctrl_msg__req__soft_apconnected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__soft_apconnected_sta__free_unpacked
                     (CtrlMsgReqSoftAPConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSoftAPConnectedSTA methods */
void   ctrl_msg__resp__soft_apconnected_sta__init
                     (CtrlMsgRespSoftAPConnectedSTA         *message);
size_t ctrl_msg__resp__soft_apconnected_sta__get_packed_size
                     (const CtrlMsgRespSoftAPConnectedSTA   *message);
size_t ctrl_msg__resp__soft_apconnected_sta__pack
                     (const CtrlMsgRespSoftAPConnectedSTA   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__soft_apconnected_sta__pack_to_buffer
                     (const CtrlMsgRespSoftAPConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSoftAPConnectedSTA *
       ctrl_msg__resp__soft_apconnected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__soft_apconnected_sta__free_unpacked
                     (CtrlMsgRespSoftAPConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTABegin methods */
void   ctrl_msg__req__otabegin__init
                     (CtrlMsgReqOTABegin         *message);
size_t ctrl_msg__req__otabegin__get_packed_size
                     (const CtrlMsgReqOTABegin   *message);
size_t ctrl_msg__req__otabegin__pack
                     (const CtrlMsgReqOTABegin   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otabegin__pack_to_buffer
                     (const CtrlMsgReqOTABegin   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTABegin *
       ctrl_msg__req__otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otabegin__free_unpacked
                     (CtrlMsgReqOTABegin *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTABegin methods */
void   ctrl_msg__resp__otabegin__init
                     (CtrlMsgRespOTABegin         *message);
size_t ctrl_msg__resp__otabegin__get_packed_size
                     (const CtrlMsgRespOTABegin   *message);
size_t ctrl_msg__resp__otabegin__pack
                     (const CtrlMsgRespOTABegin   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otabegin__pack_to_buffer
                     (const CtrlMsgRespOTABegin   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTABegin *
       ctrl_msg__resp__otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otabegin__free_unpacked
                     (CtrlMsgRespOTABegin *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTAWrite methods */
void   ctrl_msg__req__otawrite__init
                     (CtrlMsgReqOTAWrite         *message);
size_t ctrl_msg__req__otawrite__get_packed_size
                     (const CtrlMsgReqOTAWrite   *message);
size_t ctrl_msg__req__otawrite__pack
                     (const CtrlMsgReqOTAWrite   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otawrite__pack_to_buffer
                     (const CtrlMsgReqOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTAWrite *
       ctrl_msg__req__otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otawrite__free_unpacked
                     (CtrlMsgReqOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTAWrite methods */
void   ctrl_msg__resp__otawrite__init
                     (CtrlMsgRespOTAWrite         *message);
size_t ctrl_msg__resp__otawrite__get_packed_size
                     (const CtrlMsgRespOTAWrite   *message);
size_t ctrl_msg__resp__otawrite__pack
                     (const CtrlMsgRespOTAWrite   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otawrite__pack_to_buffer
                     (const CtrlMsgRespOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTAWrite *
       ctrl_msg__resp__otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otawrite__free_unpacked
                     (CtrlMsgRespOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTAEnd methods */
void   ctrl_msg__req__otaend__init
                     (CtrlMsgReqOTAEnd         *message);
size_t ctrl_msg__req__otaend__get_packed_size
                     (const CtrlMsgReqOTAEnd   *message);
size_t ctrl_msg__req__otaend__pack
                     (const CtrlMsgReqOTAEnd   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otaend__pack_to_buffer
                     (const CtrlMsgReqOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTAEnd *
       ctrl_msg__req__otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otaend__free_unpacked
                     (CtrlMsgReqOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTAEnd methods */
void   ctrl_msg__resp__otaend__init
                     (CtrlMsgRespOTAEnd         *message);
size_t ctrl_msg__resp__otaend__get_packed_size
                     (const CtrlMsgRespOTAEnd   *message);
size_t ctrl_msg__resp__otaend__pack
                     (const CtrlMsgRespOTAEnd   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otaend__pack_to_buffer
                     (const CtrlMsgRespOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTAEnd *
       ctrl_msg__resp__otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otaend__free_unpacked
                     (CtrlMsgRespOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqVendorIEData methods */
void   ctrl_msg__req__vendor_iedata__init
                     (CtrlMsgReqVendorIEData         *message);
size_t ctrl_msg__req__vendor_iedata__get_packed_size
                     (const CtrlMsgReqVendorIEData   *message);
size_t ctrl_msg__req__vendor_iedata__pack
                     (const CtrlMsgReqVendorIEData   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__vendor_iedata__pack_to_buffer
                     (const CtrlMsgReqVendorIEData   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqVendorIEData *
       ctrl_msg__req__vendor_iedata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__vendor_iedata__free_unpacked
                     (CtrlMsgReqVendorIEData *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetSoftAPVendorSpecificIE methods */
void   ctrl_msg__req__set_soft_apvendor_specific_ie__init
                     (CtrlMsgReqSetSoftAPVendorSpecificIE         *message);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__get_packed_size
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__pack
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__pack_to_buffer
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetSoftAPVendorSpecificIE *
       ctrl_msg__req__set_soft_apvendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_soft_apvendor_specific_ie__free_unpacked
                     (CtrlMsgReqSetSoftAPVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetSoftAPVendorSpecificIE methods */
void   ctrl_msg__resp__set_soft_apvendor_specific_ie__init
                     (CtrlMsgRespSetSoftAPVendorSpecificIE         *message);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__get_packed_size
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__pack
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__pack_to_buffer
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetSoftAPVendorSpecificIE *
       ctrl_msg__resp__set_soft_apvendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_soft_apvendor_specific_ie__free_unpacked
                     (CtrlMsgRespSetSoftAPVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiSetMaxTxPower methods */
void   ctrl_msg__req__wifi_set_max_tx_power__init
                     (CtrlMsgReqWifiSetMaxTxPower         *message);
size_t ctrl_msg__req__wifi_set_max_tx_power__get_packed_size
                     (const CtrlMsgReqWifiSetMaxTxPower   *message);
size_t ctrl_msg__req__wifi_set_max_tx_power__pack
                     (const CtrlMsgReqWifiSetMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_set_max_tx_power__pack_to_buffer
                     (const CtrlMsgReqWifiSetMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiSetMaxTxPower *
       ctrl_msg__req__wifi_set_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_set_max_tx_power__free_unpacked
                     (CtrlMsgReqWifiSetMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiSetMaxTxPower methods */
void   ctrl_msg__resp__wifi_set_max_tx_power__init
                     (CtrlMsgRespWifiSetMaxTxPower         *message);
size_t ctrl_msg__resp__wifi_set_max_tx_power__get_packed_size
                     (const CtrlMsgRespWifiSetMaxTxPower   *message);
size_t ctrl_msg__resp__wifi_set_max_tx_power__pack
                     (const CtrlMsgRespWifiSetMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_set_max_tx_power__pack_to_buffer
                     (const CtrlMsgRespWifiSetMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiSetMaxTxPower *
       ctrl_msg__resp__wifi_set_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_set_max_tx_power__free_unpacked
                     (CtrlMsgRespWifiSetMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiGetMaxTxPower methods */
void   ctrl_msg__req__wifi_get_max_tx_power__init
                     (CtrlMsgReqWifiGetMaxTxPower         *message);
size_t ctrl_msg__req__wifi_get_max_tx_power__get_packed_size
                     (const CtrlMsgReqWifiGetMaxTxPower   *message);
size_t ctrl_msg__req__wifi_get_max_tx_power__pack
                     (const CtrlMsgReqWifiGetMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_get_max_tx_power__pack_to_buffer
                     (const CtrlMsgReqWifiGetMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiGetMaxTxPower *
       ctrl_msg__req__wifi_get_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_get_max_tx_power__free_unpacked
                     (CtrlMsgReqWifiGetMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiGetMaxTxPower methods */
void   ctrl_msg__resp__wifi_get_max_tx_power__init
                     (CtrlMsgRespWifiGetMaxTxPower         *message);
size_t ctrl_msg__resp__wifi_get_max_tx_power__get_packed_size
                     (const CtrlMsgRespWifiGetMaxTxPower   *message);
size_t ctrl_msg__resp__wifi_get_max_tx_power__pack
                     (const CtrlMsgRespWifiGetMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_get_max_tx_power__pack_to_buffer
                     (const CtrlMsgRespWifiGetMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiGetMaxTxPower *
       ctrl_msg__resp__wifi_get_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_get_max_tx_power__free_unpacked
                     (CtrlMsgRespWifiGetMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqConfigHeartbeat methods */
void   ctrl_msg__req__config_heartbeat__init
                     (CtrlMsgReqConfigHeartbeat         *message);
size_t ctrl_msg__req__config_heartbeat__get_packed_size
                     (const CtrlMsgReqConfigHeartbeat   *message);
size_t ctrl_msg__req__config_heartbeat__pack
                     (const CtrlMsgReqConfigHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__config_heartbeat__pack_to_buffer
                     (const CtrlMsgReqConfigHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqConfigHeartbeat *
       ctrl_msg__req__config_heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__config_heartbeat__free_unpacked
                     (CtrlMsgReqConfigHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespConfigHeartbeat methods */
void   ctrl_msg__resp__config_heartbeat__init
                     (CtrlMsgRespConfigHeartbeat         *message);
size_t ctrl_msg__resp__config_heartbeat__get_packed_size
                     (const CtrlMsgRespConfigHeartbeat   *message);
size_t ctrl_msg__resp__config_heartbeat__pack
                     (const CtrlMsgRespConfigHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__config_heartbeat__pack_to_buffer
                     (const CtrlMsgRespConfigHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespConfigHeartbeat *
       ctrl_msg__resp__config_heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__config_heartbeat__free_unpacked
                     (CtrlMsgRespConfigHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiInit methods */
void   ctrl_msg__req__wifi_init__init
                     (CtrlMsgReqWifiInit         *message);
size_t ctrl_msg__req__wifi_init__get_packed_size
                     (const CtrlMsgReqWifiInit   *message);
size_t ctrl_msg__req__wifi_init__pack
                     (const CtrlMsgReqWifiInit   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_init__pack_to_buffer
                     (const CtrlMsgReqWifiInit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiInit *
       ctrl_msg__req__wifi_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_init__free_unpacked
                     (CtrlMsgReqWifiInit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiInit methods */
void   ctrl_msg__resp__wifi_init__init
                     (CtrlMsgRespWifiInit         *message);
size_t ctrl_msg__resp__wifi_init__get_packed_size
                     (const CtrlMsgRespWifiInit   *message);
size_t ctrl_msg__resp__wifi_init__pack
                     (const CtrlMsgRespWifiInit   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_init__pack_to_buffer
                     (const CtrlMsgRespWifiInit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiInit *
       ctrl_msg__resp__wifi_init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_init__free_unpacked
                     (CtrlMsgRespWifiInit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiDeinit methods */
void   ctrl_msg__req__wifi_deinit__init
                     (CtrlMsgReqWifiDeinit         *message);
size_t ctrl_msg__req__wifi_deinit__get_packed_size
                     (const CtrlMsgReqWifiDeinit   *message);
size_t ctrl_msg__req__wifi_deinit__pack
                     (const CtrlMsgReqWifiDeinit   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_deinit__pack_to_buffer
                     (const CtrlMsgReqWifiDeinit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiDeinit *
       ctrl_msg__req__wifi_deinit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_deinit__free_unpacked
                     (CtrlMsgReqWifiDeinit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiDeinit methods */
void   ctrl_msg__resp__wifi_deinit__init
                     (CtrlMsgRespWifiDeinit         *message);
size_t ctrl_msg__resp__wifi_deinit__get_packed_size
                     (const CtrlMsgRespWifiDeinit   *message);
size_t ctrl_msg__resp__wifi_deinit__pack
                     (const CtrlMsgRespWifiDeinit   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_deinit__pack_to_buffer
                     (const CtrlMsgRespWifiDeinit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiDeinit *
       ctrl_msg__resp__wifi_deinit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_deinit__free_unpacked
                     (CtrlMsgRespWifiDeinit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiSetConfig methods */
void   ctrl_msg__req__wifi_set_config__init
                     (CtrlMsgReqWifiSetConfig         *message);
size_t ctrl_msg__req__wifi_set_config__get_packed_size
                     (const CtrlMsgReqWifiSetConfig   *message);
size_t ctrl_msg__req__wifi_set_config__pack
                     (const CtrlMsgReqWifiSetConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_set_config__pack_to_buffer
                     (const CtrlMsgReqWifiSetConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiSetConfig *
       ctrl_msg__req__wifi_set_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_set_config__free_unpacked
                     (CtrlMsgReqWifiSetConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiSetConfig methods */
void   ctrl_msg__resp__wifi_set_config__init
                     (CtrlMsgRespWifiSetConfig         *message);
size_t ctrl_msg__resp__wifi_set_config__get_packed_size
                     (const CtrlMsgRespWifiSetConfig   *message);
size_t ctrl_msg__resp__wifi_set_config__pack
                     (const CtrlMsgRespWifiSetConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_set_config__pack_to_buffer
                     (const CtrlMsgRespWifiSetConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiSetConfig *
       ctrl_msg__resp__wifi_set_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_set_config__free_unpacked
                     (CtrlMsgRespWifiSetConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiGetConfig methods */
void   ctrl_msg__req__wifi_get_config__init
                     (CtrlMsgReqWifiGetConfig         *message);
size_t ctrl_msg__req__wifi_get_config__get_packed_size
                     (const CtrlMsgReqWifiGetConfig   *message);
size_t ctrl_msg__req__wifi_get_config__pack
                     (const CtrlMsgReqWifiGetConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_get_config__pack_to_buffer
                     (const CtrlMsgReqWifiGetConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiGetConfig *
       ctrl_msg__req__wifi_get_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_get_config__free_unpacked
                     (CtrlMsgReqWifiGetConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiGetConfig methods */
void   ctrl_msg__resp__wifi_get_config__init
                     (CtrlMsgRespWifiGetConfig         *message);
size_t ctrl_msg__resp__wifi_get_config__get_packed_size
                     (const CtrlMsgRespWifiGetConfig   *message);
size_t ctrl_msg__resp__wifi_get_config__pack
                     (const CtrlMsgRespWifiGetConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_get_config__pack_to_buffer
                     (const CtrlMsgRespWifiGetConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiGetConfig *
       ctrl_msg__resp__wifi_get_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_get_config__free_unpacked
                     (CtrlMsgRespWifiGetConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiConnect methods */
void   ctrl_msg__req__wifi_connect__init
                     (CtrlMsgReqWifiConnect         *message);
size_t ctrl_msg__req__wifi_connect__get_packed_size
                     (const CtrlMsgReqWifiConnect   *message);
size_t ctrl_msg__req__wifi_connect__pack
                     (const CtrlMsgReqWifiConnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_connect__pack_to_buffer
                     (const CtrlMsgReqWifiConnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiConnect *
       ctrl_msg__req__wifi_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_connect__free_unpacked
                     (CtrlMsgReqWifiConnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiConnect methods */
void   ctrl_msg__resp__wifi_connect__init
                     (CtrlMsgRespWifiConnect         *message);
size_t ctrl_msg__resp__wifi_connect__get_packed_size
                     (const CtrlMsgRespWifiConnect   *message);
size_t ctrl_msg__resp__wifi_connect__pack
                     (const CtrlMsgRespWifiConnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_connect__pack_to_buffer
                     (const CtrlMsgRespWifiConnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiConnect *
       ctrl_msg__resp__wifi_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_connect__free_unpacked
                     (CtrlMsgRespWifiConnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiDisconnect methods */
void   ctrl_msg__req__wifi_disconnect__init
                     (CtrlMsgReqWifiDisconnect         *message);
size_t ctrl_msg__req__wifi_disconnect__get_packed_size
                     (const CtrlMsgReqWifiDisconnect   *message);
size_t ctrl_msg__req__wifi_disconnect__pack
                     (const CtrlMsgReqWifiDisconnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_disconnect__pack_to_buffer
                     (const CtrlMsgReqWifiDisconnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiDisconnect *
       ctrl_msg__req__wifi_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_disconnect__free_unpacked
                     (CtrlMsgReqWifiDisconnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiDisconnect methods */
void   ctrl_msg__resp__wifi_disconnect__init
                     (CtrlMsgRespWifiDisconnect         *message);
size_t ctrl_msg__resp__wifi_disconnect__get_packed_size
                     (const CtrlMsgRespWifiDisconnect   *message);
size_t ctrl_msg__resp__wifi_disconnect__pack
                     (const CtrlMsgRespWifiDisconnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_disconnect__pack_to_buffer
                     (const CtrlMsgRespWifiDisconnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiDisconnect *
       ctrl_msg__resp__wifi_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_disconnect__free_unpacked
                     (CtrlMsgRespWifiDisconnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiStart methods */
void   ctrl_msg__req__wifi_start__init
                     (CtrlMsgReqWifiStart         *message);
size_t ctrl_msg__req__wifi_start__get_packed_size
                     (const CtrlMsgReqWifiStart   *message);
size_t ctrl_msg__req__wifi_start__pack
                     (const CtrlMsgReqWifiStart   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_start__pack_to_buffer
                     (const CtrlMsgReqWifiStart   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiStart *
       ctrl_msg__req__wifi_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_start__free_unpacked
                     (CtrlMsgReqWifiStart *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiStart methods */
void   ctrl_msg__resp__wifi_start__init
                     (CtrlMsgRespWifiStart         *message);
size_t ctrl_msg__resp__wifi_start__get_packed_size
                     (const CtrlMsgRespWifiStart   *message);
size_t ctrl_msg__resp__wifi_start__pack
                     (const CtrlMsgRespWifiStart   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_start__pack_to_buffer
                     (const CtrlMsgRespWifiStart   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiStart *
       ctrl_msg__resp__wifi_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_start__free_unpacked
                     (CtrlMsgRespWifiStart *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiStop methods */
void   ctrl_msg__req__wifi_stop__init
                     (CtrlMsgReqWifiStop         *message);
size_t ctrl_msg__req__wifi_stop__get_packed_size
                     (const CtrlMsgReqWifiStop   *message);
size_t ctrl_msg__req__wifi_stop__pack
                     (const CtrlMsgReqWifiStop   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_stop__pack_to_buffer
                     (const CtrlMsgReqWifiStop   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiStop *
       ctrl_msg__req__wifi_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_stop__free_unpacked
                     (CtrlMsgReqWifiStop *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiStop methods */
void   ctrl_msg__resp__wifi_stop__init
                     (CtrlMsgRespWifiStop         *message);
size_t ctrl_msg__resp__wifi_stop__get_packed_size
                     (const CtrlMsgRespWifiStop   *message);
size_t ctrl_msg__resp__wifi_stop__pack
                     (const CtrlMsgRespWifiStop   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_stop__pack_to_buffer
                     (const CtrlMsgRespWifiStop   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiStop *
       ctrl_msg__resp__wifi_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_stop__free_unpacked
                     (CtrlMsgRespWifiStop *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiScanStart methods */
void   ctrl_msg__req__wifi_scan_start__init
                     (CtrlMsgReqWifiScanStart         *message);
size_t ctrl_msg__req__wifi_scan_start__get_packed_size
                     (const CtrlMsgReqWifiScanStart   *message);
size_t ctrl_msg__req__wifi_scan_start__pack
                     (const CtrlMsgReqWifiScanStart   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_scan_start__pack_to_buffer
                     (const CtrlMsgReqWifiScanStart   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiScanStart *
       ctrl_msg__req__wifi_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_scan_start__free_unpacked
                     (CtrlMsgReqWifiScanStart *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiScanStart methods */
void   ctrl_msg__resp__wifi_scan_start__init
                     (CtrlMsgRespWifiScanStart         *message);
size_t ctrl_msg__resp__wifi_scan_start__get_packed_size
                     (const CtrlMsgRespWifiScanStart   *message);
size_t ctrl_msg__resp__wifi_scan_start__pack
                     (const CtrlMsgRespWifiScanStart   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_scan_start__pack_to_buffer
                     (const CtrlMsgRespWifiScanStart   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiScanStart *
       ctrl_msg__resp__wifi_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_scan_start__free_unpacked
                     (CtrlMsgRespWifiScanStart *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiScanStop methods */
void   ctrl_msg__req__wifi_scan_stop__init
                     (CtrlMsgReqWifiScanStop         *message);
size_t ctrl_msg__req__wifi_scan_stop__get_packed_size
                     (const CtrlMsgReqWifiScanStop   *message);
size_t ctrl_msg__req__wifi_scan_stop__pack
                     (const CtrlMsgReqWifiScanStop   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_scan_stop__pack_to_buffer
                     (const CtrlMsgReqWifiScanStop   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiScanStop *
       ctrl_msg__req__wifi_scan_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_scan_stop__free_unpacked
                     (CtrlMsgReqWifiScanStop *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiScanStop methods */
void   ctrl_msg__resp__wifi_scan_stop__init
                     (CtrlMsgRespWifiScanStop         *message);
size_t ctrl_msg__resp__wifi_scan_stop__get_packed_size
                     (const CtrlMsgRespWifiScanStop   *message);
size_t ctrl_msg__resp__wifi_scan_stop__pack
                     (const CtrlMsgRespWifiScanStop   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_scan_stop__pack_to_buffer
                     (const CtrlMsgRespWifiScanStop   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiScanStop *
       ctrl_msg__resp__wifi_scan_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_scan_stop__free_unpacked
                     (CtrlMsgRespWifiScanStop *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiScanGetApNum methods */
void   ctrl_msg__req__wifi_scan_get_ap_num__init
                     (CtrlMsgReqWifiScanGetApNum         *message);
size_t ctrl_msg__req__wifi_scan_get_ap_num__get_packed_size
                     (const CtrlMsgReqWifiScanGetApNum   *message);
size_t ctrl_msg__req__wifi_scan_get_ap_num__pack
                     (const CtrlMsgReqWifiScanGetApNum   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_scan_get_ap_num__pack_to_buffer
                     (const CtrlMsgReqWifiScanGetApNum   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiScanGetApNum *
       ctrl_msg__req__wifi_scan_get_ap_num__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_scan_get_ap_num__free_unpacked
                     (CtrlMsgReqWifiScanGetApNum *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiScanGetApNum methods */
void   ctrl_msg__resp__wifi_scan_get_ap_num__init
                     (CtrlMsgRespWifiScanGetApNum         *message);
size_t ctrl_msg__resp__wifi_scan_get_ap_num__get_packed_size
                     (const CtrlMsgRespWifiScanGetApNum   *message);
size_t ctrl_msg__resp__wifi_scan_get_ap_num__pack
                     (const CtrlMsgRespWifiScanGetApNum   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_scan_get_ap_num__pack_to_buffer
                     (const CtrlMsgRespWifiScanGetApNum   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiScanGetApNum *
       ctrl_msg__resp__wifi_scan_get_ap_num__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_scan_get_ap_num__free_unpacked
                     (CtrlMsgRespWifiScanGetApNum *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiScanGetApRecords methods */
void   ctrl_msg__req__wifi_scan_get_ap_records__init
                     (CtrlMsgReqWifiScanGetApRecords         *message);
size_t ctrl_msg__req__wifi_scan_get_ap_records__get_packed_size
                     (const CtrlMsgReqWifiScanGetApRecords   *message);
size_t ctrl_msg__req__wifi_scan_get_ap_records__pack
                     (const CtrlMsgReqWifiScanGetApRecords   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_scan_get_ap_records__pack_to_buffer
                     (const CtrlMsgReqWifiScanGetApRecords   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiScanGetApRecords *
       ctrl_msg__req__wifi_scan_get_ap_records__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_scan_get_ap_records__free_unpacked
                     (CtrlMsgReqWifiScanGetApRecords *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiScanGetApRecords methods */
void   ctrl_msg__resp__wifi_scan_get_ap_records__init
                     (CtrlMsgRespWifiScanGetApRecords         *message);
size_t ctrl_msg__resp__wifi_scan_get_ap_records__get_packed_size
                     (const CtrlMsgRespWifiScanGetApRecords   *message);
size_t ctrl_msg__resp__wifi_scan_get_ap_records__pack
                     (const CtrlMsgRespWifiScanGetApRecords   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_scan_get_ap_records__pack_to_buffer
                     (const CtrlMsgRespWifiScanGetApRecords   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiScanGetApRecords *
       ctrl_msg__resp__wifi_scan_get_ap_records__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_scan_get_ap_records__free_unpacked
                     (CtrlMsgRespWifiScanGetApRecords *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiClearApList methods */
void   ctrl_msg__req__wifi_clear_ap_list__init
                     (CtrlMsgReqWifiClearApList         *message);
size_t ctrl_msg__req__wifi_clear_ap_list__get_packed_size
                     (const CtrlMsgReqWifiClearApList   *message);
size_t ctrl_msg__req__wifi_clear_ap_list__pack
                     (const CtrlMsgReqWifiClearApList   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_clear_ap_list__pack_to_buffer
                     (const CtrlMsgReqWifiClearApList   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiClearApList *
       ctrl_msg__req__wifi_clear_ap_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_clear_ap_list__free_unpacked
                     (CtrlMsgReqWifiClearApList *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiClearApList methods */
void   ctrl_msg__resp__wifi_clear_ap_list__init
                     (CtrlMsgRespWifiClearApList         *message);
size_t ctrl_msg__resp__wifi_clear_ap_list__get_packed_size
                     (const CtrlMsgRespWifiClearApList   *message);
size_t ctrl_msg__resp__wifi_clear_ap_list__pack
                     (const CtrlMsgRespWifiClearApList   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_clear_ap_list__pack_to_buffer
                     (const CtrlMsgRespWifiClearApList   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiClearApList *
       ctrl_msg__resp__wifi_clear_ap_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_clear_ap_list__free_unpacked
                     (CtrlMsgRespWifiClearApList *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiRestore methods */
void   ctrl_msg__req__wifi_restore__init
                     (CtrlMsgReqWifiRestore         *message);
size_t ctrl_msg__req__wifi_restore__get_packed_size
                     (const CtrlMsgReqWifiRestore   *message);
size_t ctrl_msg__req__wifi_restore__pack
                     (const CtrlMsgReqWifiRestore   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_restore__pack_to_buffer
                     (const CtrlMsgReqWifiRestore   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiRestore *
       ctrl_msg__req__wifi_restore__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_restore__free_unpacked
                     (CtrlMsgReqWifiRestore *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiRestore methods */
void   ctrl_msg__resp__wifi_restore__init
                     (CtrlMsgRespWifiRestore         *message);
size_t ctrl_msg__resp__wifi_restore__get_packed_size
                     (const CtrlMsgRespWifiRestore   *message);
size_t ctrl_msg__resp__wifi_restore__pack
                     (const CtrlMsgRespWifiRestore   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_restore__pack_to_buffer
                     (const CtrlMsgRespWifiRestore   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiRestore *
       ctrl_msg__resp__wifi_restore__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_restore__free_unpacked
                     (CtrlMsgRespWifiRestore *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiClearFastConnect methods */
void   ctrl_msg__req__wifi_clear_fast_connect__init
                     (CtrlMsgReqWifiClearFastConnect         *message);
size_t ctrl_msg__req__wifi_clear_fast_connect__get_packed_size
                     (const CtrlMsgReqWifiClearFastConnect   *message);
size_t ctrl_msg__req__wifi_clear_fast_connect__pack
                     (const CtrlMsgReqWifiClearFastConnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_clear_fast_connect__pack_to_buffer
                     (const CtrlMsgReqWifiClearFastConnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiClearFastConnect *
       ctrl_msg__req__wifi_clear_fast_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_clear_fast_connect__free_unpacked
                     (CtrlMsgReqWifiClearFastConnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiClearFastConnect methods */
void   ctrl_msg__resp__wifi_clear_fast_connect__init
                     (CtrlMsgRespWifiClearFastConnect         *message);
size_t ctrl_msg__resp__wifi_clear_fast_connect__get_packed_size
                     (const CtrlMsgRespWifiClearFastConnect   *message);
size_t ctrl_msg__resp__wifi_clear_fast_connect__pack
                     (const CtrlMsgRespWifiClearFastConnect   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_clear_fast_connect__pack_to_buffer
                     (const CtrlMsgRespWifiClearFastConnect   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiClearFastConnect *
       ctrl_msg__resp__wifi_clear_fast_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_clear_fast_connect__free_unpacked
                     (CtrlMsgRespWifiClearFastConnect *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiDeauthSta methods */
void   ctrl_msg__req__wifi_deauth_sta__init
                     (CtrlMsgReqWifiDeauthSta         *message);
size_t ctrl_msg__req__wifi_deauth_sta__get_packed_size
                     (const CtrlMsgReqWifiDeauthSta   *message);
size_t ctrl_msg__req__wifi_deauth_sta__pack
                     (const CtrlMsgReqWifiDeauthSta   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_deauth_sta__pack_to_buffer
                     (const CtrlMsgReqWifiDeauthSta   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiDeauthSta *
       ctrl_msg__req__wifi_deauth_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_deauth_sta__free_unpacked
                     (CtrlMsgReqWifiDeauthSta *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiDeauthSta methods */
void   ctrl_msg__resp__wifi_deauth_sta__init
                     (CtrlMsgRespWifiDeauthSta         *message);
size_t ctrl_msg__resp__wifi_deauth_sta__get_packed_size
                     (const CtrlMsgRespWifiDeauthSta   *message);
size_t ctrl_msg__resp__wifi_deauth_sta__pack
                     (const CtrlMsgRespWifiDeauthSta   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_deauth_sta__pack_to_buffer
                     (const CtrlMsgRespWifiDeauthSta   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiDeauthSta *
       ctrl_msg__resp__wifi_deauth_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_deauth_sta__free_unpacked
                     (CtrlMsgRespWifiDeauthSta *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqWifiStaGetApInfo methods */
void   ctrl_msg__req__wifi_sta_get_ap_info__init
                     (CtrlMsgReqWifiStaGetApInfo         *message);
size_t ctrl_msg__req__wifi_sta_get_ap_info__get_packed_size
                     (const CtrlMsgReqWifiStaGetApInfo   *message);
size_t ctrl_msg__req__wifi_sta_get_ap_info__pack
                     (const CtrlMsgReqWifiStaGetApInfo   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__wifi_sta_get_ap_info__pack_to_buffer
                     (const CtrlMsgReqWifiStaGetApInfo   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqWifiStaGetApInfo *
       ctrl_msg__req__wifi_sta_get_ap_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__wifi_sta_get_ap_info__free_unpacked
                     (CtrlMsgReqWifiStaGetApInfo *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespWifiStaGetApInfo methods */
void   ctrl_msg__resp__wifi_sta_get_ap_info__init
                     (CtrlMsgRespWifiStaGetApInfo         *message);
size_t ctrl_msg__resp__wifi_sta_get_ap_info__get_packed_size
                     (const CtrlMsgRespWifiStaGetApInfo   *message);
size_t ctrl_msg__resp__wifi_sta_get_ap_info__pack
                     (const CtrlMsgRespWifiStaGetApInfo   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__wifi_sta_get_ap_info__pack_to_buffer
                     (const CtrlMsgRespWifiStaGetApInfo   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespWifiStaGetApInfo *
       ctrl_msg__resp__wifi_sta_get_ap_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__wifi_sta_get_ap_info__free_unpacked
                     (CtrlMsgRespWifiStaGetApInfo *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventWifiEventNoArgs methods */
void   ctrl_msg__event__wifi_event_no_args__init
                     (CtrlMsgEventWifiEventNoArgs         *message);
size_t ctrl_msg__event__wifi_event_no_args__get_packed_size
                     (const CtrlMsgEventWifiEventNoArgs   *message);
size_t ctrl_msg__event__wifi_event_no_args__pack
                     (const CtrlMsgEventWifiEventNoArgs   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__wifi_event_no_args__pack_to_buffer
                     (const CtrlMsgEventWifiEventNoArgs   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventWifiEventNoArgs *
       ctrl_msg__event__wifi_event_no_args__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__wifi_event_no_args__free_unpacked
                     (CtrlMsgEventWifiEventNoArgs *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventESPInit methods */
void   ctrl_msg__event__espinit__init
                     (CtrlMsgEventESPInit         *message);
size_t ctrl_msg__event__espinit__get_packed_size
                     (const CtrlMsgEventESPInit   *message);
size_t ctrl_msg__event__espinit__pack
                     (const CtrlMsgEventESPInit   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__espinit__pack_to_buffer
                     (const CtrlMsgEventESPInit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventESPInit *
       ctrl_msg__event__espinit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__espinit__free_unpacked
                     (CtrlMsgEventESPInit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventHeartbeat methods */
void   ctrl_msg__event__heartbeat__init
                     (CtrlMsgEventHeartbeat         *message);
size_t ctrl_msg__event__heartbeat__get_packed_size
                     (const CtrlMsgEventHeartbeat   *message);
size_t ctrl_msg__event__heartbeat__pack
                     (const CtrlMsgEventHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__heartbeat__pack_to_buffer
                     (const CtrlMsgEventHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventHeartbeat *
       ctrl_msg__event__heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__heartbeat__free_unpacked
                     (CtrlMsgEventHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventStationDisconnectFromAP methods */
void   ctrl_msg__event__station_disconnect_from_ap__init
                     (CtrlMsgEventStationDisconnectFromAP         *message);
size_t ctrl_msg__event__station_disconnect_from_ap__get_packed_size
                     (const CtrlMsgEventStationDisconnectFromAP   *message);
size_t ctrl_msg__event__station_disconnect_from_ap__pack
                     (const CtrlMsgEventStationDisconnectFromAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__station_disconnect_from_ap__pack_to_buffer
                     (const CtrlMsgEventStationDisconnectFromAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventStationDisconnectFromAP *
       ctrl_msg__event__station_disconnect_from_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__station_disconnect_from_ap__free_unpacked
                     (CtrlMsgEventStationDisconnectFromAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventAPStaDisconnected methods */
void   ctrl_msg__event__ap__sta_disconnected__init
                     (CtrlMsgEventAPStaDisconnected         *message);
size_t ctrl_msg__event__ap__sta_disconnected__get_packed_size
                     (const CtrlMsgEventAPStaDisconnected   *message);
size_t ctrl_msg__event__ap__sta_disconnected__pack
                     (const CtrlMsgEventAPStaDisconnected   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__ap__sta_disconnected__pack_to_buffer
                     (const CtrlMsgEventAPStaDisconnected   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventAPStaDisconnected *
       ctrl_msg__event__ap__sta_disconnected__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__ap__sta_disconnected__free_unpacked
                     (CtrlMsgEventAPStaDisconnected *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventAPStaConnected methods */
void   ctrl_msg__event__ap__sta_connected__init
                     (CtrlMsgEventAPStaConnected         *message);
size_t ctrl_msg__event__ap__sta_connected__get_packed_size
                     (const CtrlMsgEventAPStaConnected   *message);
size_t ctrl_msg__event__ap__sta_connected__pack
                     (const CtrlMsgEventAPStaConnected   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__ap__sta_connected__pack_to_buffer
                     (const CtrlMsgEventAPStaConnected   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventAPStaConnected *
       ctrl_msg__event__ap__sta_connected__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__ap__sta_connected__free_unpacked
                     (CtrlMsgEventAPStaConnected *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventStaScanDone methods */
void   ctrl_msg__event__sta_scan_done__init
                     (CtrlMsgEventStaScanDone         *message);
size_t ctrl_msg__event__sta_scan_done__get_packed_size
                     (const CtrlMsgEventStaScanDone   *message);
size_t ctrl_msg__event__sta_scan_done__pack
                     (const CtrlMsgEventStaScanDone   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__sta_scan_done__pack_to_buffer
                     (const CtrlMsgEventStaScanDone   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventStaScanDone *
       ctrl_msg__event__sta_scan_done__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__sta_scan_done__free_unpacked
                     (CtrlMsgEventStaScanDone *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsg methods */
void   ctrl_msg__init
                     (CtrlMsg         *message);
size_t ctrl_msg__get_packed_size
                     (const CtrlMsg   *message);
size_t ctrl_msg__pack
                     (const CtrlMsg   *message,
                      uint8_t             *out);
size_t ctrl_msg__pack_to_buffer
                     (const CtrlMsg   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsg *
       ctrl_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__free_unpacked
                     (CtrlMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*WifiInitConfig_Closure)
                 (const WifiInitConfig *message,
                  void *closure_data);
typedef void (*WifiCountry_Closure)
                 (const WifiCountry *message,
                  void *closure_data);
typedef void (*WifiActiveScanTime_Closure)
                 (const WifiActiveScanTime *message,
                  void *closure_data);
typedef void (*WifiScanTime_Closure)
                 (const WifiScanTime *message,
                  void *closure_data);
typedef void (*WifiScanConfig_Closure)
                 (const WifiScanConfig *message,
                  void *closure_data);
typedef void (*WifiApRecord_Closure)
                 (const WifiApRecord *message,
                  void *closure_data);
typedef void (*WifiScanThreshold_Closure)
                 (const WifiScanThreshold *message,
                  void *closure_data);
typedef void (*WifiPmfConfig_Closure)
                 (const WifiPmfConfig *message,
                  void *closure_data);
typedef void (*WifiApConfig_Closure)
                 (const WifiApConfig *message,
                  void *closure_data);
typedef void (*WifiStaConfig_Closure)
                 (const WifiStaConfig *message,
                  void *closure_data);
typedef void (*WifiConfig_Closure)
                 (const WifiConfig *message,
                  void *closure_data);
typedef void (*WifiStaInfo_Closure)
                 (const WifiStaInfo *message,
                  void *closure_data);
typedef void (*WifiStaList_Closure)
                 (const WifiStaList *message,
                  void *closure_data);
typedef void (*VendorIeData_Closure)
                 (const VendorIeData *message,
                  void *closure_data);
typedef void (*WifiPktRxCtrl_Closure)
                 (const WifiPktRxCtrl *message,
                  void *closure_data);
typedef void (*WifiPromiscuousPkt_Closure)
                 (const WifiPromiscuousPkt *message,
                  void *closure_data);
typedef void (*WifiPromiscuousFilter_Closure)
                 (const WifiPromiscuousFilter *message,
                  void *closure_data);
typedef void (*WifiCsiConfig_Closure)
                 (const WifiCsiConfig *message,
                  void *closure_data);
typedef void (*WifiCsiInfo_Closure)
                 (const WifiCsiInfo *message,
                  void *closure_data);
typedef void (*WifiAntGpio_Closure)
                 (const WifiAntGpio *message,
                  void *closure_data);
typedef void (*WifiAntGpioConfig_Closure)
                 (const WifiAntGpioConfig *message,
                  void *closure_data);
typedef void (*WifiAntConfig_Closure)
                 (const WifiAntConfig *message,
                  void *closure_data);
typedef void (*WifiActionTxReq_Closure)
                 (const WifiActionTxReq *message,
                  void *closure_data);
typedef void (*WifiFtmInitiatorCfg_Closure)
                 (const WifiFtmInitiatorCfg *message,
                  void *closure_data);
typedef void (*WifiEventStaScanDone_Closure)
                 (const WifiEventStaScanDone *message,
                  void *closure_data);
typedef void (*WifiEventStaConnected_Closure)
                 (const WifiEventStaConnected *message,
                  void *closure_data);
typedef void (*WifiEventStaDisconnected_Closure)
                 (const WifiEventStaDisconnected *message,
                  void *closure_data);
typedef void (*WifiEventStaAuthmodeChange_Closure)
                 (const WifiEventStaAuthmodeChange *message,
                  void *closure_data);
typedef void (*WifiEventStaWpsErPin_Closure)
                 (const WifiEventStaWpsErPin *message,
                  void *closure_data);
typedef void (*ApCred_Closure)
                 (const ApCred *message,
                  void *closure_data);
typedef void (*WifiEventStaWpsErSuccess_Closure)
                 (const WifiEventStaWpsErSuccess *message,
                  void *closure_data);
typedef void (*WifiEventApProbeReqRx_Closure)
                 (const WifiEventApProbeReqRx *message,
                  void *closure_data);
typedef void (*WifiEventBssRssiLow_Closure)
                 (const WifiEventBssRssiLow *message,
                  void *closure_data);
typedef void (*WifiFtmReportEntry_Closure)
                 (const WifiFtmReportEntry *message,
                  void *closure_data);
typedef void (*WifiEventFtmReport_Closure)
                 (const WifiEventFtmReport *message,
                  void *closure_data);
typedef void (*WifiEventActionTxStatus_Closure)
                 (const WifiEventActionTxStatus *message,
                  void *closure_data);
typedef void (*WifiEventRocDone_Closure)
                 (const WifiEventRocDone *message,
                  void *closure_data);
typedef void (*WifiEventApWpsRgPin_Closure)
                 (const WifiEventApWpsRgPin *message,
                  void *closure_data);
typedef void (*WifiEventApWpsRgFailReason_Closure)
                 (const WifiEventApWpsRgFailReason *message,
                  void *closure_data);
typedef void (*WifiEventApWpsRgSuccess_Closure)
                 (const WifiEventApWpsRgSuccess *message,
                  void *closure_data);
typedef void (*ScanResult_Closure)
                 (const ScanResult *message,
                  void *closure_data);
typedef void (*ConnectedSTAList_Closure)
                 (const ConnectedSTAList *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetMacAddress_Closure)
                 (const CtrlMsgReqGetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetMacAddress_Closure)
                 (const CtrlMsgRespGetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetMode_Closure)
                 (const CtrlMsgReqGetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetMode_Closure)
                 (const CtrlMsgRespGetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetMode_Closure)
                 (const CtrlMsgReqSetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetMode_Closure)
                 (const CtrlMsgRespSetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetStatus_Closure)
                 (const CtrlMsgReqGetStatus *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetStatus_Closure)
                 (const CtrlMsgRespGetStatus *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetMacAddress_Closure)
                 (const CtrlMsgReqSetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetMacAddress_Closure)
                 (const CtrlMsgRespSetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetAPConfig_Closure)
                 (const CtrlMsgReqGetAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetAPConfig_Closure)
                 (const CtrlMsgRespGetAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqConnectAP_Closure)
                 (const CtrlMsgReqConnectAP *message,
                  void *closure_data);
typedef void (*CtrlMsgRespConnectAP_Closure)
                 (const CtrlMsgRespConnectAP *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetSoftAPConfig_Closure)
                 (const CtrlMsgReqGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetSoftAPConfig_Closure)
                 (const CtrlMsgRespGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqStartSoftAP_Closure)
                 (const CtrlMsgReqStartSoftAP *message,
                  void *closure_data);
typedef void (*CtrlMsgRespStartSoftAP_Closure)
                 (const CtrlMsgRespStartSoftAP *message,
                  void *closure_data);
typedef void (*CtrlMsgReqScanResult_Closure)
                 (const CtrlMsgReqScanResult *message,
                  void *closure_data);
typedef void (*CtrlMsgRespScanResult_Closure)
                 (const CtrlMsgRespScanResult *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSoftAPConnectedSTA_Closure)
                 (const CtrlMsgReqSoftAPConnectedSTA *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSoftAPConnectedSTA_Closure)
                 (const CtrlMsgRespSoftAPConnectedSTA *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTABegin_Closure)
                 (const CtrlMsgReqOTABegin *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTABegin_Closure)
                 (const CtrlMsgRespOTABegin *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTAWrite_Closure)
                 (const CtrlMsgReqOTAWrite *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTAWrite_Closure)
                 (const CtrlMsgRespOTAWrite *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTAEnd_Closure)
                 (const CtrlMsgReqOTAEnd *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTAEnd_Closure)
                 (const CtrlMsgRespOTAEnd *message,
                  void *closure_data);
typedef void (*CtrlMsgReqVendorIEData_Closure)
                 (const CtrlMsgReqVendorIEData *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetSoftAPVendorSpecificIE_Closure)
                 (const CtrlMsgReqSetSoftAPVendorSpecificIE *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetSoftAPVendorSpecificIE_Closure)
                 (const CtrlMsgRespSetSoftAPVendorSpecificIE *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiSetMaxTxPower_Closure)
                 (const CtrlMsgReqWifiSetMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiSetMaxTxPower_Closure)
                 (const CtrlMsgRespWifiSetMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiGetMaxTxPower_Closure)
                 (const CtrlMsgReqWifiGetMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiGetMaxTxPower_Closure)
                 (const CtrlMsgRespWifiGetMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgReqConfigHeartbeat_Closure)
                 (const CtrlMsgReqConfigHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgRespConfigHeartbeat_Closure)
                 (const CtrlMsgRespConfigHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiInit_Closure)
                 (const CtrlMsgReqWifiInit *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiInit_Closure)
                 (const CtrlMsgRespWifiInit *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiDeinit_Closure)
                 (const CtrlMsgReqWifiDeinit *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiDeinit_Closure)
                 (const CtrlMsgRespWifiDeinit *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiSetConfig_Closure)
                 (const CtrlMsgReqWifiSetConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiSetConfig_Closure)
                 (const CtrlMsgRespWifiSetConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiGetConfig_Closure)
                 (const CtrlMsgReqWifiGetConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiGetConfig_Closure)
                 (const CtrlMsgRespWifiGetConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiConnect_Closure)
                 (const CtrlMsgReqWifiConnect *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiConnect_Closure)
                 (const CtrlMsgRespWifiConnect *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiDisconnect_Closure)
                 (const CtrlMsgReqWifiDisconnect *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiDisconnect_Closure)
                 (const CtrlMsgRespWifiDisconnect *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiStart_Closure)
                 (const CtrlMsgReqWifiStart *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiStart_Closure)
                 (const CtrlMsgRespWifiStart *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiStop_Closure)
                 (const CtrlMsgReqWifiStop *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiStop_Closure)
                 (const CtrlMsgRespWifiStop *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiScanStart_Closure)
                 (const CtrlMsgReqWifiScanStart *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiScanStart_Closure)
                 (const CtrlMsgRespWifiScanStart *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiScanStop_Closure)
                 (const CtrlMsgReqWifiScanStop *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiScanStop_Closure)
                 (const CtrlMsgRespWifiScanStop *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiScanGetApNum_Closure)
                 (const CtrlMsgReqWifiScanGetApNum *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiScanGetApNum_Closure)
                 (const CtrlMsgRespWifiScanGetApNum *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiScanGetApRecords_Closure)
                 (const CtrlMsgReqWifiScanGetApRecords *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiScanGetApRecords_Closure)
                 (const CtrlMsgRespWifiScanGetApRecords *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiClearApList_Closure)
                 (const CtrlMsgReqWifiClearApList *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiClearApList_Closure)
                 (const CtrlMsgRespWifiClearApList *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiRestore_Closure)
                 (const CtrlMsgReqWifiRestore *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiRestore_Closure)
                 (const CtrlMsgRespWifiRestore *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiClearFastConnect_Closure)
                 (const CtrlMsgReqWifiClearFastConnect *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiClearFastConnect_Closure)
                 (const CtrlMsgRespWifiClearFastConnect *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiDeauthSta_Closure)
                 (const CtrlMsgReqWifiDeauthSta *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiDeauthSta_Closure)
                 (const CtrlMsgRespWifiDeauthSta *message,
                  void *closure_data);
typedef void (*CtrlMsgReqWifiStaGetApInfo_Closure)
                 (const CtrlMsgReqWifiStaGetApInfo *message,
                  void *closure_data);
typedef void (*CtrlMsgRespWifiStaGetApInfo_Closure)
                 (const CtrlMsgRespWifiStaGetApInfo *message,
                  void *closure_data);
typedef void (*CtrlMsgEventWifiEventNoArgs_Closure)
                 (const CtrlMsgEventWifiEventNoArgs *message,
                  void *closure_data);
typedef void (*CtrlMsgEventESPInit_Closure)
                 (const CtrlMsgEventESPInit *message,
                  void *closure_data);
typedef void (*CtrlMsgEventHeartbeat_Closure)
                 (const CtrlMsgEventHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgEventStationDisconnectFromAP_Closure)
                 (const CtrlMsgEventStationDisconnectFromAP *message,
                  void *closure_data);
typedef void (*CtrlMsgEventAPStaDisconnected_Closure)
                 (const CtrlMsgEventAPStaDisconnected *message,
                  void *closure_data);
typedef void (*CtrlMsgEventAPStaConnected_Closure)
                 (const CtrlMsgEventAPStaConnected *message,
                  void *closure_data);
typedef void (*CtrlMsgEventStaScanDone_Closure)
                 (const CtrlMsgEventStaScanDone *message,
                  void *closure_data);
typedef void (*CtrlMsg_Closure)
                 (const CtrlMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ctrl__vendor_ietype__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__vendor_ieid__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_bw__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_power_save__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_sec_prot__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__status__descriptor;
extern const ProtobufCEnumDescriptor    ctrl_msg_type__descriptor;
extern const ProtobufCEnumDescriptor    ctrl_msg_id__descriptor;
extern const ProtobufCMessageDescriptor wifi_init_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_country__descriptor;
extern const ProtobufCMessageDescriptor wifi_active_scan_time__descriptor;
extern const ProtobufCMessageDescriptor wifi_scan_time__descriptor;
extern const ProtobufCMessageDescriptor wifi_scan_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_ap_record__descriptor;
extern const ProtobufCMessageDescriptor wifi_scan_threshold__descriptor;
extern const ProtobufCMessageDescriptor wifi_pmf_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_ap_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_sta_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_sta_info__descriptor;
extern const ProtobufCMessageDescriptor wifi_sta_list__descriptor;
extern const ProtobufCMessageDescriptor vendor_ie_data__descriptor;
extern const ProtobufCMessageDescriptor wifi_pkt_rx_ctrl__descriptor;
extern const ProtobufCMessageDescriptor wifi_promiscuous_pkt__descriptor;
extern const ProtobufCMessageDescriptor wifi_promiscuous_filter__descriptor;
extern const ProtobufCMessageDescriptor wifi_csi_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_csi_info__descriptor;
extern const ProtobufCMessageDescriptor wifi_ant_gpio__descriptor;
extern const ProtobufCMessageDescriptor wifi_ant_gpio_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_ant_config__descriptor;
extern const ProtobufCMessageDescriptor wifi_action_tx_req__descriptor;
extern const ProtobufCMessageDescriptor wifi_ftm_initiator_cfg__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_scan_done__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_connected__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_disconnected__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_authmode_change__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_wps_er_pin__descriptor;
extern const ProtobufCMessageDescriptor ap_cred__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_sta_wps_er_success__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_ap_probe_req_rx__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_bss_rssi_low__descriptor;
extern const ProtobufCMessageDescriptor wifi_ftm_report_entry__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_ftm_report__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_action_tx_status__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_roc_done__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_ap_wps_rg_pin__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_ap_wps_rg_fail_reason__descriptor;
extern const ProtobufCMessageDescriptor wifi_event_ap_wps_rg_success__descriptor;
extern const ProtobufCMessageDescriptor scan_result__descriptor;
extern const ProtobufCMessageDescriptor connected_stalist__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_status__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_status__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__connect_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__connect_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__start_soft_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__start_soft_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__scan_result__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__scan_result__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__soft_apconnected_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__soft_apconnected_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otabegin__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otabegin__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otawrite__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otawrite__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otaend__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otaend__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__vendor_iedata__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_soft_apvendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_soft_apvendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_set_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_set_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_get_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_get_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__config_heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__config_heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_init__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_init__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_deinit__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_deinit__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_set_config__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_set_config__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_get_config__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_get_config__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_connect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_connect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_disconnect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_disconnect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_start__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_start__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_stop__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_stop__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_scan_start__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_scan_start__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_scan_stop__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_scan_stop__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_scan_get_ap_num__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_scan_get_ap_num__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_scan_get_ap_records__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_scan_get_ap_records__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_clear_ap_list__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_clear_ap_list__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_restore__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_restore__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_clear_fast_connect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_clear_fast_connect__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_deauth_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_deauth_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__wifi_sta_get_ap_info__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__wifi_sta_get_ap_info__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__wifi_event_no_args__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__espinit__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__station_disconnect_from_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__ap__sta_disconnected__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__ap__sta_connected__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__sta_scan_done__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED */
